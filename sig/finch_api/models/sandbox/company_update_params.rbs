module FinchAPI
  module Models
    module Sandbox
      type company_update_params =
        {
          accounts: ::Array[FinchAPI::Sandbox::CompanyUpdateParams::Account]?,
          departments: ::Array[FinchAPI::Sandbox::CompanyUpdateParams::Department?]?,
          ein: String?,
          entity: FinchAPI::Sandbox::CompanyUpdateParams::Entity?,
          legal_name: String?,
          locations: ::Array[FinchAPI::Location?]?,
          primary_email: String?,
          primary_phone_number: String?
        }
        & FinchAPI::Internal::Type::request_parameters

      class CompanyUpdateParams < FinchAPI::Internal::Type::BaseModel
        extend FinchAPI::Internal::Type::RequestParameters::Converter
        include FinchAPI::Internal::Type::RequestParameters

        attr_accessor accounts: ::Array[FinchAPI::Sandbox::CompanyUpdateParams::Account]?

        attr_accessor departments: ::Array[FinchAPI::Sandbox::CompanyUpdateParams::Department?]?

        attr_accessor ein: String?

        attr_accessor entity: FinchAPI::Sandbox::CompanyUpdateParams::Entity?

        attr_accessor legal_name: String?

        attr_accessor locations: ::Array[FinchAPI::Location?]?

        attr_accessor primary_email: String?

        attr_accessor primary_phone_number: String?

        def initialize: (
          accounts: ::Array[FinchAPI::Sandbox::CompanyUpdateParams::Account]?,
          departments: ::Array[FinchAPI::Sandbox::CompanyUpdateParams::Department?]?,
          ein: String?,
          entity: FinchAPI::Sandbox::CompanyUpdateParams::Entity?,
          legal_name: String?,
          locations: ::Array[FinchAPI::Location?]?,
          primary_email: String?,
          primary_phone_number: String?,
          ?request_options: FinchAPI::request_opts
        ) -> void

        def to_hash: -> {
          accounts: ::Array[FinchAPI::Sandbox::CompanyUpdateParams::Account]?,
          departments: ::Array[FinchAPI::Sandbox::CompanyUpdateParams::Department?]?,
          ein: String?,
          entity: FinchAPI::Sandbox::CompanyUpdateParams::Entity?,
          legal_name: String?,
          locations: ::Array[FinchAPI::Location?]?,
          primary_email: String?,
          primary_phone_number: String?,
          request_options: FinchAPI::RequestOptions
        }

        type account =
          {
            account_name: String?,
            account_number: String?,
            account_type: FinchAPI::Models::Sandbox::CompanyUpdateParams::Account::account_type?,
            institution_name: String?,
            routing_number: String?
          }

        class Account < FinchAPI::Internal::Type::BaseModel
          attr_accessor account_name: String?

          attr_accessor account_number: String?

          attr_accessor account_type: FinchAPI::Models::Sandbox::CompanyUpdateParams::Account::account_type?

          attr_accessor institution_name: String?

          attr_accessor routing_number: String?

          def initialize: (
            ?account_name: String?,
            ?account_number: String?,
            ?account_type: FinchAPI::Models::Sandbox::CompanyUpdateParams::Account::account_type?,
            ?institution_name: String?,
            ?routing_number: String?
          ) -> void

          def to_hash: -> {
            account_name: String?,
            account_number: String?,
            account_type: FinchAPI::Models::Sandbox::CompanyUpdateParams::Account::account_type?,
            institution_name: String?,
            routing_number: String?
          }

          type account_type = :checking | :savings

          module AccountType
            extend FinchAPI::Internal::Type::Enum

            CHECKING: :checking
            SAVINGS: :savings

            def self?.values: -> ::Array[FinchAPI::Models::Sandbox::CompanyUpdateParams::Account::account_type]
          end
        end

        type department =
          {
            name: String?,
            parent: FinchAPI::Sandbox::CompanyUpdateParams::Department::Parent?
          }

        class Department < FinchAPI::Internal::Type::BaseModel
          attr_accessor name: String?

          attr_accessor parent: FinchAPI::Sandbox::CompanyUpdateParams::Department::Parent?

          def initialize: (
            ?name: String?,
            ?parent: FinchAPI::Sandbox::CompanyUpdateParams::Department::Parent?
          ) -> void

          def to_hash: -> {
            name: String?,
            parent: FinchAPI::Sandbox::CompanyUpdateParams::Department::Parent?
          }

          type parent = { name: String? }

          class Parent < FinchAPI::Internal::Type::BaseModel
            attr_accessor name: String?

            def initialize: (?name: String?) -> void

            def to_hash: -> { name: String? }
          end
        end

        type entity =
          {
            subtype: FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::subtype?,
            type: FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::type_?
          }

        class Entity < FinchAPI::Internal::Type::BaseModel
          attr_accessor subtype: FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::subtype?

          attr_accessor type: FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::type_?

          def initialize: (
            ?subtype: FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::subtype?,
            ?type: FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::type_?
          ) -> void

          def to_hash: -> {
            subtype: FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::subtype?,
            type: FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::type_?
          }

          type subtype = :s_corporation | :c_corporation | :b_corporation

          module Subtype
            extend FinchAPI::Internal::Type::Enum

            S_CORPORATION: :s_corporation
            C_CORPORATION: :c_corporation
            B_CORPORATION: :b_corporation

            def self?.values: -> ::Array[FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::subtype]
          end

          type type_ =
            :llc
            | :lp
            | :corporation
            | :sole_proprietor
            | :non_profit
            | :partnership
            | :cooperative

          module Type
            extend FinchAPI::Internal::Type::Enum

            LLC: :llc
            LP: :lp
            CORPORATION: :corporation
            SOLE_PROPRIETOR: :sole_proprietor
            NON_PROFIT: :non_profit
            PARTNERSHIP: :partnership
            COOPERATIVE: :cooperative

            def self?.values: -> ::Array[FinchAPI::Models::Sandbox::CompanyUpdateParams::Entity::type_]
          end
        end
      end
    end
  end
end
