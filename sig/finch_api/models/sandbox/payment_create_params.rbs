module FinchAPI
  module Models
    module Sandbox
      type payment_create_params =
        {
          end_date: String,
          pay_statements: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement],
          start_date: String
        }
        & FinchAPI::Internal::Type::request_parameters

      class PaymentCreateParams < FinchAPI::Internal::Type::BaseModel
        extend FinchAPI::Internal::Type::RequestParameters::Converter
        include FinchAPI::Internal::Type::RequestParameters

        attr_reader end_date: String?

        def end_date=: (String) -> String

        attr_reader pay_statements: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement]?

        def pay_statements=: (
          ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement]
        ) -> ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement]

        attr_reader start_date: String?

        def start_date=: (String) -> String

        def initialize: (
          ?end_date: String,
          ?pay_statements: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement],
          ?start_date: String,
          ?request_options: FinchAPI::request_opts
        ) -> void

        def to_hash: -> {
          end_date: String,
          pay_statements: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement],
          start_date: String,
          request_options: FinchAPI::RequestOptions
        }

        type pay_statement =
          {
            earnings: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning?]?,
            employee_deductions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction?]?,
            employer_contributions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution?]?,
            gross_pay: FinchAPI::Money?,
            individual_id: String,
            net_pay: FinchAPI::Money?,
            payment_method: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method?,
            taxes: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax?]?,
            total_hours: Float?,
            type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_?
          }

        class PayStatement < FinchAPI::Internal::Type::BaseModel
          attr_accessor earnings: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning?]?

          attr_accessor employee_deductions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction?]?

          attr_accessor employer_contributions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution?]?

          attr_accessor gross_pay: FinchAPI::Money?

          attr_accessor individual_id: String

          attr_accessor net_pay: FinchAPI::Money?

          attr_accessor payment_method: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method?

          attr_accessor taxes: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax?]?

          attr_accessor total_hours: Float?

          attr_accessor type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_?

          def initialize: (
            earnings: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning?]?,
            employee_deductions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction?]?,
            employer_contributions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution?]?,
            gross_pay: FinchAPI::Money?,
            individual_id: String,
            net_pay: FinchAPI::Money?,
            payment_method: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method?,
            taxes: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax?]?,
            total_hours: Float?,
            type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_?
          ) -> void

          def to_hash: -> {
            earnings: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning?]?,
            employee_deductions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction?]?,
            employer_contributions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution?]?,
            gross_pay: FinchAPI::Money?,
            individual_id: String,
            net_pay: FinchAPI::Money?,
            payment_method: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method?,
            taxes: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax?]?,
            total_hours: Float?,
            type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_?
          }

          type earning =
            {
              amount: Integer?,
              currency: String?,
              hours: Float?,
              name: String?,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_?,
              attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning::Attributes?
            }

          class Earning < FinchAPI::Internal::Type::BaseModel
            attr_accessor amount: Integer?

            attr_accessor currency: String?

            attr_accessor hours: Float?

            attr_accessor name: String?

            attr_accessor type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_?

            attr_accessor attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning::Attributes?

            def initialize: (
              amount: Integer?,
              currency: String?,
              hours: Float?,
              name: String?,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_?,
              ?attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning::Attributes?
            ) -> void

            def to_hash: -> {
              amount: Integer?,
              currency: String?,
              hours: Float?,
              name: String?,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_?,
              attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning::Attributes?
            }

            type type_ =
              :salary
              | :wage
              | :reimbursement
              | :overtime
              | :severance
              | :double_overtime
              | :pto
              | :sick
              | :bonus
              | :commission
              | :tips
              | :"1099"
              | :other

            module Type
              extend FinchAPI::Internal::Type::Enum

              SALARY: :salary
              WAGE: :wage
              REIMBURSEMENT: :reimbursement
              OVERTIME: :overtime
              SEVERANCE: :severance
              DOUBLE_OVERTIME: :double_overtime
              PTO: :pto
              SICK: :sick
              BONUS: :bonus
              COMMISSION: :commission
              TIPS: :tips
              TYPE_1099: :"1099"
              OTHER: :other

              def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_]
            end

            type attributes =
              {
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning::Attributes::Metadata
              }

            class Attributes < FinchAPI::Internal::Type::BaseModel
              attr_accessor metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning::Attributes::Metadata

              def initialize: (
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning::Attributes::Metadata
              ) -> void

              def to_hash: -> {
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning::Attributes::Metadata
              }

              type metadata = { metadata: ::Hash[Symbol, top?] }

              class Metadata < FinchAPI::Internal::Type::BaseModel
                attr_accessor metadata: ::Hash[Symbol, top?]

                def initialize: (metadata: ::Hash[Symbol, top?]) -> void

                def to_hash: -> { metadata: ::Hash[Symbol, top?] }
              end
            end
          end

          type employee_deduction =
            {
              amount: Integer?,
              currency: String?,
              name: String?,
              pre_tax: bool?,
              type: FinchAPI::Models::HRIS::benefit_type?,
              attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::Attributes?
            }

          class EmployeeDeduction < FinchAPI::Internal::Type::BaseModel
            attr_accessor amount: Integer?

            attr_accessor currency: String?

            attr_accessor name: String?

            attr_accessor pre_tax: bool?

            attr_accessor type: FinchAPI::Models::HRIS::benefit_type?

            attr_accessor attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::Attributes?

            def initialize: (
              amount: Integer?,
              currency: String?,
              name: String?,
              pre_tax: bool?,
              type: FinchAPI::Models::HRIS::benefit_type?,
              ?attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::Attributes?
            ) -> void

            def to_hash: -> {
              amount: Integer?,
              currency: String?,
              name: String?,
              pre_tax: bool?,
              type: FinchAPI::Models::HRIS::benefit_type?,
              attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::Attributes?
            }

            type attributes =
              {
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::Attributes::Metadata
              }

            class Attributes < FinchAPI::Internal::Type::BaseModel
              attr_accessor metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::Attributes::Metadata

              def initialize: (
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::Attributes::Metadata
              ) -> void

              def to_hash: -> {
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::Attributes::Metadata
              }

              type metadata = { metadata: ::Hash[Symbol, top?] }

              class Metadata < FinchAPI::Internal::Type::BaseModel
                attr_accessor metadata: ::Hash[Symbol, top?]

                def initialize: (metadata: ::Hash[Symbol, top?]) -> void

                def to_hash: -> { metadata: ::Hash[Symbol, top?] }
              end
            end
          end

          type employer_contribution =
            {
              currency: String?,
              name: String?,
              type: FinchAPI::Models::HRIS::benefit_type?,
              amount: Integer?,
              attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::Attributes?
            }

          class EmployerContribution < FinchAPI::Internal::Type::BaseModel
            attr_accessor currency: String?

            attr_accessor name: String?

            attr_accessor type: FinchAPI::Models::HRIS::benefit_type?

            attr_accessor amount: Integer?

            attr_accessor attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::Attributes?

            def initialize: (
              currency: String?,
              name: String?,
              type: FinchAPI::Models::HRIS::benefit_type?,
              ?amount: Integer?,
              ?attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::Attributes?
            ) -> void

            def to_hash: -> {
              currency: String?,
              name: String?,
              type: FinchAPI::Models::HRIS::benefit_type?,
              amount: Integer?,
              attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::Attributes?
            }

            type attributes =
              {
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::Attributes::Metadata
              }

            class Attributes < FinchAPI::Internal::Type::BaseModel
              attr_accessor metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::Attributes::Metadata

              def initialize: (
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::Attributes::Metadata
              ) -> void

              def to_hash: -> {
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::Attributes::Metadata
              }

              type metadata = { metadata: ::Hash[Symbol, top?] }

              class Metadata < FinchAPI::Internal::Type::BaseModel
                attr_accessor metadata: ::Hash[Symbol, top?]

                def initialize: (metadata: ::Hash[Symbol, top?]) -> void

                def to_hash: -> { metadata: ::Hash[Symbol, top?] }
              end
            end
          end

          type payment_method = :check | :direct_deposit | :other

          module PaymentMethod
            extend FinchAPI::Internal::Type::Enum

            CHECK: :check
            DIRECT_DEPOSIT: :direct_deposit
            OTHER: :other

            def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method]
          end

          type tax =
            {
              currency: String?,
              employer: bool?,
              name: String?,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_?,
              amount: Integer?,
              attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax::Attributes?
            }

          class Tax < FinchAPI::Internal::Type::BaseModel
            attr_accessor currency: String?

            attr_accessor employer: bool?

            attr_accessor name: String?

            attr_accessor type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_?

            attr_accessor amount: Integer?

            attr_accessor attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax::Attributes?

            def initialize: (
              currency: String?,
              employer: bool?,
              name: String?,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_?,
              ?amount: Integer?,
              ?attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax::Attributes?
            ) -> void

            def to_hash: -> {
              currency: String?,
              employer: bool?,
              name: String?,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_?,
              amount: Integer?,
              attributes: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax::Attributes?
            }

            type type_ = :state | :federal | :local | :fica

            module Type
              extend FinchAPI::Internal::Type::Enum

              STATE: :state
              FEDERAL: :federal
              LOCAL: :local
              FICA: :fica

              def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_]
            end

            type attributes =
              {
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax::Attributes::Metadata
              }

            class Attributes < FinchAPI::Internal::Type::BaseModel
              attr_accessor metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax::Attributes::Metadata

              def initialize: (
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax::Attributes::Metadata
              ) -> void

              def to_hash: -> {
                metadata: FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax::Attributes::Metadata
              }

              type metadata = { metadata: ::Hash[Symbol, top?] }

              class Metadata < FinchAPI::Internal::Type::BaseModel
                attr_accessor metadata: ::Hash[Symbol, top?]

                def initialize: (metadata: ::Hash[Symbol, top?]) -> void

                def to_hash: -> { metadata: ::Hash[Symbol, top?] }
              end
            end
          end

          type type_ = :off_cycle_payroll | :one_time_payment | :regular_payroll

          module Type
            extend FinchAPI::Internal::Type::Enum

            OFF_CYCLE_PAYROLL: :off_cycle_payroll
            ONE_TIME_PAYMENT: :one_time_payment
            REGULAR_PAYROLL: :regular_payroll

            def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_]
          end
        end
      end
    end
  end
end
