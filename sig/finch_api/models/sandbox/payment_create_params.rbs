module FinchAPI
  module Models
    module Sandbox
      type payment_create_params =
        {
          end_date: Date,
          pay_statements: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement],
          start_date: Date
        }
        & FinchAPI::Internal::Type::request_parameters

      class PaymentCreateParams < FinchAPI::Internal::Type::BaseModel
        extend FinchAPI::Internal::Type::RequestParameters::Converter
        include FinchAPI::Internal::Type::RequestParameters

        attr_reader end_date: Date?

        def end_date=: (Date) -> Date

        attr_reader pay_statements: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement]?

        def pay_statements=: (
          ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement]
        ) -> ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement]

        attr_reader start_date: Date?

        def start_date=: (Date) -> Date

        def initialize: (
          ?end_date: Date,
          ?pay_statements: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement],
          ?start_date: Date,
          ?request_options: FinchAPI::request_opts
        ) -> void

        def to_hash: -> {
          end_date: Date,
          pay_statements: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement],
          start_date: Date,
          request_options: FinchAPI::RequestOptions
        }

        type pay_statement =
          {
            individual_id: String,
            earnings: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning],
            employee_deductions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction],
            employer_contributions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution],
            gross_pay: Integer,
            net_pay: Integer,
            payment_method: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method?,
            taxes: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax],
            total_hours: Float,
            type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_?
          }

        class PayStatement < FinchAPI::Internal::Type::BaseModel
          attr_accessor individual_id: String

          attr_reader earnings: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning]?

          def earnings=: (
            ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning]
          ) -> ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning]

          attr_reader employee_deductions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction]?

          def employee_deductions=: (
            ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction]
          ) -> ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction]

          attr_reader employer_contributions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution]?

          def employer_contributions=: (
            ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution]
          ) -> ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution]

          attr_reader gross_pay: Integer?

          def gross_pay=: (Integer) -> Integer

          attr_reader net_pay: Integer?

          def net_pay=: (Integer) -> Integer

          attr_accessor payment_method: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method?

          attr_reader taxes: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax]?

          def taxes=: (
            ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax]
          ) -> ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax]

          attr_reader total_hours: Float?

          def total_hours=: (Float) -> Float

          attr_accessor type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_?

          def initialize: (
            individual_id: String,
            ?earnings: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning],
            ?employee_deductions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction],
            ?employer_contributions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution],
            ?gross_pay: Integer,
            ?net_pay: Integer,
            ?payment_method: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method?,
            ?taxes: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax],
            ?total_hours: Float,
            ?type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_?
          ) -> void

          def to_hash: -> {
            individual_id: String,
            earnings: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Earning],
            employee_deductions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction],
            employer_contributions: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution],
            gross_pay: Integer,
            net_pay: Integer,
            payment_method: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method?,
            taxes: ::Array[FinchAPI::Sandbox::PaymentCreateParams::PayStatement::Tax],
            total_hours: Float,
            type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_?
          }

          type earning =
            {
              amount: Integer,
              hours: Float,
              name: String,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_
            }

          class Earning < FinchAPI::Internal::Type::BaseModel
            attr_reader amount: Integer?

            def amount=: (Integer) -> Integer

            attr_reader hours: Float?

            def hours=: (Float) -> Float

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_?

            def type=: (
              FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_
            ) -> FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_

            def initialize: (
              ?amount: Integer,
              ?hours: Float,
              ?name: String,
              ?type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_
            ) -> void

            def to_hash: -> {
              amount: Integer,
              hours: Float,
              name: String,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_
            }

            type type_ =
              :bonus
              | :commission
              | :double_overtime
              | :other
              | :overtime
              | :pto
              | :reimbursement
              | :salary
              | :severance
              | :sick
              | :tips
              | :wage
              | :"1099"

            module Type
              extend FinchAPI::Internal::Type::Enum

              BONUS: :bonus
              COMMISSION: :commission
              DOUBLE_OVERTIME: :double_overtime
              OTHER: :other
              OVERTIME: :overtime
              PTO: :pto
              REIMBURSEMENT: :reimbursement
              SALARY: :salary
              SEVERANCE: :severance
              SICK: :sick
              TIPS: :tips
              WAGE: :wage
              TYPE_1099: :"1099"

              def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Earning::type_]
            end
          end

          type employee_deduction =
            {
              amount: Integer,
              name: String,
              pre_tax: bool,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::type_
            }

          class EmployeeDeduction < FinchAPI::Internal::Type::BaseModel
            attr_reader amount: Integer?

            def amount=: (Integer) -> Integer

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader pre_tax: bool?

            def pre_tax=: (bool) -> bool

            attr_reader type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::type_?

            def type=: (
              FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::type_
            ) -> FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::type_

            def initialize: (
              ?amount: Integer,
              ?name: String,
              ?pre_tax: bool,
              ?type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::type_
            ) -> void

            def to_hash: -> {
              amount: Integer,
              name: String,
              pre_tax: bool,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::type_
            }

            type type_ =
              :"457"
              | :"401k"
              | :"401k_roth"
              | :"401k_loan"
              | :"403b"
              | :"403b_roth"
              | :"457_roth"
              | :commuter
              | :custom_post_tax
              | :custom_pre_tax
              | :fsa_dependent_care
              | :fsa_medical
              | :hsa_post
              | :hsa_pre
              | :s125_dental
              | :s125_medical
              | :s125_vision
              | :simple
              | :simple_ira

            module Type
              extend FinchAPI::Internal::Type::Enum

              TYPE_457: :"457"
              TYPE_401K: :"401k"
              TYPE_401K_ROTH: :"401k_roth"
              TYPE_401K_LOAN: :"401k_loan"
              TYPE_403B: :"403b"
              TYPE_403B_ROTH: :"403b_roth"
              TYPE_457_ROTH: :"457_roth"
              COMMUTER: :commuter
              CUSTOM_POST_TAX: :custom_post_tax
              CUSTOM_PRE_TAX: :custom_pre_tax
              FSA_DEPENDENT_CARE: :fsa_dependent_care
              FSA_MEDICAL: :fsa_medical
              HSA_POST: :hsa_post
              HSA_PRE: :hsa_pre
              S125_DENTAL: :s125_dental
              S125_MEDICAL: :s125_medical
              S125_VISION: :s125_vision
              SIMPLE: :simple
              SIMPLE_IRA: :simple_ira

              def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployeeDeduction::type_]
            end
          end

          type employer_contribution =
            {
              amount: Integer,
              name: String,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::type_
            }

          class EmployerContribution < FinchAPI::Internal::Type::BaseModel
            attr_reader amount: Integer?

            def amount=: (Integer) -> Integer

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::type_?

            def type=: (
              FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::type_
            ) -> FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::type_

            def initialize: (
              ?amount: Integer,
              ?name: String,
              ?type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::type_
            ) -> void

            def to_hash: -> {
              amount: Integer,
              name: String,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::type_
            }

            type type_ =
              :"457"
              | :"401k"
              | :"401k_roth"
              | :"401k_loan"
              | :"403b"
              | :"403b_roth"
              | :"457_roth"
              | :commuter
              | :custom_post_tax
              | :custom_pre_tax
              | :fsa_dependent_care
              | :fsa_medical
              | :hsa_post
              | :hsa_pre
              | :s125_dental
              | :s125_medical
              | :s125_vision
              | :simple
              | :simple_ira

            module Type
              extend FinchAPI::Internal::Type::Enum

              TYPE_457: :"457"
              TYPE_401K: :"401k"
              TYPE_401K_ROTH: :"401k_roth"
              TYPE_401K_LOAN: :"401k_loan"
              TYPE_403B: :"403b"
              TYPE_403B_ROTH: :"403b_roth"
              TYPE_457_ROTH: :"457_roth"
              COMMUTER: :commuter
              CUSTOM_POST_TAX: :custom_post_tax
              CUSTOM_PRE_TAX: :custom_pre_tax
              FSA_DEPENDENT_CARE: :fsa_dependent_care
              FSA_MEDICAL: :fsa_medical
              HSA_POST: :hsa_post
              HSA_PRE: :hsa_pre
              S125_DENTAL: :s125_dental
              S125_MEDICAL: :s125_medical
              S125_VISION: :s125_vision
              SIMPLE: :simple
              SIMPLE_IRA: :simple_ira

              def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::EmployerContribution::type_]
            end
          end

          type payment_method = :check | :direct_deposit | :other

          module PaymentMethod
            extend FinchAPI::Internal::Type::Enum

            CHECK: :check
            DIRECT_DEPOSIT: :direct_deposit
            OTHER: :other

            def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::payment_method]
          end

          type tax =
            {
              amount: Integer,
              employer: bool,
              name: String,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_
            }

          class Tax < FinchAPI::Internal::Type::BaseModel
            attr_reader amount: Integer?

            def amount=: (Integer) -> Integer

            attr_reader employer: bool?

            def employer=: (bool) -> bool

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_?

            def type=: (
              FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_
            ) -> FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_

            def initialize: (
              ?amount: Integer,
              ?employer: bool,
              ?name: String,
              ?type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_
            ) -> void

            def to_hash: -> {
              amount: Integer,
              employer: bool,
              name: String,
              type: FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_
            }

            type type_ = :federal | :fica | :local | :state

            module Type
              extend FinchAPI::Internal::Type::Enum

              FEDERAL: :federal
              FICA: :fica
              LOCAL: :local
              STATE: :state

              def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::Tax::type_]
            end
          end

          type type_ = :off_cycle_payroll | :one_time_payment | :regular_payroll

          module Type
            extend FinchAPI::Internal::Type::Enum

            OFF_CYCLE_PAYROLL: :off_cycle_payroll
            ONE_TIME_PAYMENT: :one_time_payment
            REGULAR_PAYROLL: :regular_payroll

            def self?.values: -> ::Array[FinchAPI::Models::Sandbox::PaymentCreateParams::PayStatement::type_]
          end
        end
      end
    end
  end
end
