module FinchAPI
  module Models
    module Sandbox
      type employment_update_params =
        {
          class_code: String?,
          custom_fields: ::Array[FinchAPI::Sandbox::EmploymentUpdateParams::CustomField],
          department: FinchAPI::Sandbox::EmploymentUpdateParams::Department?,
          employment: FinchAPI::Sandbox::EmploymentUpdateParams::Employment?,
          employment_status: FinchAPI::Models::Sandbox::EmploymentUpdateParams::employment_status?,
          end_date: String?,
          first_name: String?,
          income: FinchAPI::Income?,
          income_history: ::Array[FinchAPI::Income?]?,
          is_active: bool?,
          last_name: String?,
          latest_rehire_date: String?,
          location: FinchAPI::Location?,
          manager: FinchAPI::Sandbox::EmploymentUpdateParams::Manager?,
          middle_name: String?,
          source_id: String,
          start_date: String?,
          title: String?
        }
        & FinchAPI::Internal::Type::request_parameters

      class EmploymentUpdateParams < FinchAPI::Internal::Type::BaseModel
        extend FinchAPI::Internal::Type::RequestParameters::Converter
        include FinchAPI::Internal::Type::RequestParameters

        attr_accessor class_code: String?

        attr_reader custom_fields: ::Array[FinchAPI::Sandbox::EmploymentUpdateParams::CustomField]?

        def custom_fields=: (
          ::Array[FinchAPI::Sandbox::EmploymentUpdateParams::CustomField]
        ) -> ::Array[FinchAPI::Sandbox::EmploymentUpdateParams::CustomField]

        attr_accessor department: FinchAPI::Sandbox::EmploymentUpdateParams::Department?

        attr_accessor employment: FinchAPI::Sandbox::EmploymentUpdateParams::Employment?

        attr_accessor employment_status: FinchAPI::Models::Sandbox::EmploymentUpdateParams::employment_status?

        attr_accessor end_date: String?

        attr_accessor first_name: String?

        attr_accessor income: FinchAPI::Income?

        attr_accessor income_history: ::Array[FinchAPI::Income?]?

        attr_accessor is_active: bool?

        attr_accessor last_name: String?

        attr_accessor latest_rehire_date: String?

        attr_accessor location: FinchAPI::Location?

        attr_accessor manager: FinchAPI::Sandbox::EmploymentUpdateParams::Manager?

        attr_accessor middle_name: String?

        attr_reader source_id: String?

        def source_id=: (String) -> String

        attr_accessor start_date: String?

        attr_accessor title: String?

        def initialize: (
          ?class_code: String?,
          ?custom_fields: ::Array[FinchAPI::Sandbox::EmploymentUpdateParams::CustomField],
          ?department: FinchAPI::Sandbox::EmploymentUpdateParams::Department?,
          ?employment: FinchAPI::Sandbox::EmploymentUpdateParams::Employment?,
          ?employment_status: FinchAPI::Models::Sandbox::EmploymentUpdateParams::employment_status?,
          ?end_date: String?,
          ?first_name: String?,
          ?income: FinchAPI::Income?,
          ?income_history: ::Array[FinchAPI::Income?]?,
          ?is_active: bool?,
          ?last_name: String?,
          ?latest_rehire_date: String?,
          ?location: FinchAPI::Location?,
          ?manager: FinchAPI::Sandbox::EmploymentUpdateParams::Manager?,
          ?middle_name: String?,
          ?source_id: String,
          ?start_date: String?,
          ?title: String?,
          ?request_options: FinchAPI::request_opts
        ) -> void

        type custom_field = { name: String?, value: top }

        class CustomField < FinchAPI::Internal::Type::BaseModel
          attr_accessor name: String?

          attr_reader value: top?

          def value=: (top) -> top

          def initialize: (?name: String?, ?value: top) -> void
        end

        type department = { name: String? }

        class Department < FinchAPI::Internal::Type::BaseModel
          attr_accessor name: String?

          def initialize: (?name: String?) -> void
        end

        type employment =
          {
            subtype: FinchAPI::Sandbox::EmploymentUpdateParams::Employment::subtype?,
            type: FinchAPI::Sandbox::EmploymentUpdateParams::Employment::type_?
          }

        class Employment < FinchAPI::Internal::Type::BaseModel
          attr_accessor subtype: FinchAPI::Sandbox::EmploymentUpdateParams::Employment::subtype?

          attr_accessor type: FinchAPI::Sandbox::EmploymentUpdateParams::Employment::type_?

          def initialize: (
            ?subtype: FinchAPI::Sandbox::EmploymentUpdateParams::Employment::subtype?,
            ?type: FinchAPI::Sandbox::EmploymentUpdateParams::Employment::type_?
          ) -> void

          type subtype =
            :full_time
            | :intern
            | :part_time
            | :temp
            | :seasonal
            | :individual_contractor

          module Subtype
            extend FinchAPI::Internal::Type::Enum

            FULL_TIME: :full_time
            INTERN: :intern
            PART_TIME: :part_time
            TEMP: :temp
            SEASONAL: :seasonal
            INDIVIDUAL_CONTRACTOR: :individual_contractor

            def self?.values: -> ::Array[FinchAPI::Sandbox::EmploymentUpdateParams::Employment::subtype]
          end

          type type_ = :employee | :contractor

          module Type
            extend FinchAPI::Internal::Type::Enum

            EMPLOYEE: :employee
            CONTRACTOR: :contractor

            def self?.values: -> ::Array[FinchAPI::Sandbox::EmploymentUpdateParams::Employment::type_]
          end
        end

        type employment_status =
          :active
          | :deceased
          | :leave
          | :onboarding
          | :prehire
          | :retired
          | :terminated

        module EmploymentStatus
          extend FinchAPI::Internal::Type::Enum

          ACTIVE: :active
          DECEASED: :deceased
          LEAVE: :leave
          ONBOARDING: :onboarding
          PREHIRE: :prehire
          RETIRED: :retired
          TERMINATED: :terminated

          def self?.values: -> ::Array[FinchAPI::Models::Sandbox::EmploymentUpdateParams::employment_status]
        end

        type manager = { id: String }

        class Manager < FinchAPI::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          def initialize: (?id: String) -> void
        end
      end
    end
  end
end
