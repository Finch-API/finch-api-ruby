module FinchAPI
  module Models
    module Sandbox
      type connection_create_params =
        {
          provider_id: String,
          authentication_type: FinchAPI::Models::Sandbox::ConnectionCreateParams::authentication_type,
          employee_size: Integer,
          products: ::Array[String]
        }
        & FinchAPI::request_parameters

      class ConnectionCreateParams < FinchAPI::BaseModel
        extend FinchAPI::Type::RequestParameters::Converter
        include FinchAPI::RequestParameters

        attr_accessor provider_id: String

        attr_reader authentication_type: FinchAPI::Models::Sandbox::ConnectionCreateParams::authentication_type?

        def authentication_type=: (
          FinchAPI::Models::Sandbox::ConnectionCreateParams::authentication_type
        ) -> FinchAPI::Models::Sandbox::ConnectionCreateParams::authentication_type

        attr_reader employee_size: Integer?

        def employee_size=: (Integer) -> Integer

        attr_reader products: ::Array[String]?

        def products=: (::Array[String]) -> ::Array[String]

        def initialize: (
          provider_id: String,
          ?authentication_type: FinchAPI::Models::Sandbox::ConnectionCreateParams::authentication_type,
          ?employee_size: Integer,
          ?products: ::Array[String],
          ?request_options: FinchAPI::request_opts
        ) -> void

        def to_hash: -> FinchAPI::Models::Sandbox::connection_create_params

        type authentication_type = :credential | :api_token | :oauth | :assisted

        module AuthenticationType
          extend FinchAPI::Enum

          CREDENTIAL: :credential
          API_TOKEN: :api_token
          OAUTH: :oauth
          ASSISTED: :assisted

          def self?.values: -> ::Array[FinchAPI::Models::Sandbox::ConnectionCreateParams::authentication_type]
        end
      end
    end
  end
end
