module FinchAPI
  module Models
    module Sandbox
      module Jobs
        type sandbox_job_configuration =
          {
            completion_status: FinchAPI::Models::Sandbox::Jobs::SandboxJobConfiguration::completion_status,
            type: FinchAPI::Models::Sandbox::Jobs::SandboxJobConfiguration::type_
          }

        class SandboxJobConfiguration < FinchAPI::Internal::Type::BaseModel
          attr_accessor completion_status: FinchAPI::Models::Sandbox::Jobs::SandboxJobConfiguration::completion_status

          attr_accessor type: FinchAPI::Models::Sandbox::Jobs::SandboxJobConfiguration::type_

          def initialize: (
            completion_status: FinchAPI::Models::Sandbox::Jobs::SandboxJobConfiguration::completion_status,
            type: FinchAPI::Models::Sandbox::Jobs::SandboxJobConfiguration::type_
          ) -> void

          def to_hash: -> FinchAPI::Models::Sandbox::Jobs::sandbox_job_configuration

          type completion_status =
            :complete | :reauth_error | :permissions_error | :error

          module CompletionStatus
            extend FinchAPI::Internal::Type::Enum

            COMPLETE: :complete
            REAUTH_ERROR: :reauth_error
            PERMISSIONS_ERROR: :permissions_error
            ERROR: :error

            def self?.values: -> ::Array[FinchAPI::Models::Sandbox::Jobs::SandboxJobConfiguration::completion_status]
          end

          type type_ = :data_sync_all

          module Type
            extend FinchAPI::Internal::Type::Enum

            DATA_SYNC_ALL: :data_sync_all

            def self?.values: -> ::Array[FinchAPI::Models::Sandbox::Jobs::SandboxJobConfiguration::type_]
          end
        end
      end
    end
  end
end
