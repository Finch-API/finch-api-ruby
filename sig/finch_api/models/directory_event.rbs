module FinchAPI
  module Models
    type directory_event =
      {
        data: FinchAPI::Models::DirectoryEvent::Data,
        event_type: FinchAPI::Models::DirectoryEvent::event_type
      }

    class DirectoryEvent < FinchAPI::Models::BaseWebhookEvent
      def data: -> FinchAPI::Models::DirectoryEvent::Data?

      def data=: (
        FinchAPI::Models::DirectoryEvent::Data _
      ) -> FinchAPI::Models::DirectoryEvent::Data

      def event_type: -> FinchAPI::Models::DirectoryEvent::event_type?

      def event_type=: (
        FinchAPI::Models::DirectoryEvent::event_type _
      ) -> FinchAPI::Models::DirectoryEvent::event_type

      def initialize: (
        ?data: FinchAPI::Models::DirectoryEvent::Data,
        ?event_type: FinchAPI::Models::DirectoryEvent::event_type
      ) -> void

      def to_hash: -> FinchAPI::Models::directory_event

      type data = { individual_id: String }

      class Data < FinchAPI::Internal::Type::BaseModel
        attr_reader individual_id: String?

        def individual_id=: (String) -> String

        def initialize: (?individual_id: String) -> void

        def to_hash: -> FinchAPI::Models::DirectoryEvent::data
      end

      type event_type =
        :"directory.created" | :"directory.updated" | :"directory.deleted"

      module EventType
        extend FinchAPI::Internal::Type::Enum

        DIRECTORY_CREATED: :"directory.created"
        DIRECTORY_UPDATED: :"directory.updated"
        DIRECTORY_DELETED: :"directory.deleted"

        def self?.values: -> ::Array[FinchAPI::Models::DirectoryEvent::event_type]
      end
    end
  end
end
