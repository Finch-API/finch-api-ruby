module FinchAPI
  module Models
    type provider_list_response =
      {
        id: String,
        display_name: String,
        products: ::Array[String],
        authentication_methods: ::Array[FinchAPI::Models::ProviderListResponse::AuthenticationMethod],
        beta: bool,
        icon: String,
        logo: String,
        manual: bool,
        mfa_required: bool,
        primary_color: String
      }

    class ProviderListResponse < FinchAPI::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor display_name: String

      attr_accessor products: ::Array[String]

      attr_reader authentication_methods: ::Array[FinchAPI::Models::ProviderListResponse::AuthenticationMethod]?

      def authentication_methods=: (
        ::Array[FinchAPI::Models::ProviderListResponse::AuthenticationMethod]
      ) -> ::Array[FinchAPI::Models::ProviderListResponse::AuthenticationMethod]

      attr_reader beta: bool?

      def beta=: (bool) -> bool

      attr_reader icon: String?

      def icon=: (String) -> String

      attr_reader logo: String?

      def logo=: (String) -> String

      attr_reader manual: bool?

      def manual=: (bool) -> bool

      attr_reader mfa_required: bool?

      def mfa_required=: (bool) -> bool

      attr_reader primary_color: String?

      def primary_color=: (String) -> String

      def initialize: (
        id: String,
        display_name: String,
        products: ::Array[String],
        ?authentication_methods: ::Array[FinchAPI::Models::ProviderListResponse::AuthenticationMethod],
        ?beta: bool,
        ?icon: String,
        ?logo: String,
        ?manual: bool,
        ?mfa_required: bool,
        ?primary_color: String
      ) -> void

      def to_hash: -> {
        id: String,
        display_name: String,
        products: ::Array[String],
        authentication_methods: ::Array[FinchAPI::Models::ProviderListResponse::AuthenticationMethod],
        beta: bool,
        icon: String,
        logo: String,
        manual: bool,
        mfa_required: bool,
        primary_color: String
      }

      type authentication_method =
        {
          type: FinchAPI::Models::ProviderListResponse::AuthenticationMethod::type_,
          benefits_support: ::Hash[Symbol, top?],
          supported_fields: ::Hash[Symbol, top?]
        }

      class AuthenticationMethod < FinchAPI::Internal::Type::BaseModel
        attr_accessor type: FinchAPI::Models::ProviderListResponse::AuthenticationMethod::type_

        attr_reader benefits_support: ::Hash[Symbol, top?]?

        def benefits_support=: (::Hash[Symbol, top?]) -> ::Hash[Symbol, top?]

        attr_reader supported_fields: ::Hash[Symbol, top?]?

        def supported_fields=: (::Hash[Symbol, top?]) -> ::Hash[Symbol, top?]

        def initialize: (
          type: FinchAPI::Models::ProviderListResponse::AuthenticationMethod::type_,
          ?benefits_support: ::Hash[Symbol, top?],
          ?supported_fields: ::Hash[Symbol, top?]
        ) -> void

        def to_hash: -> {
          type: FinchAPI::Models::ProviderListResponse::AuthenticationMethod::type_,
          benefits_support: ::Hash[Symbol, top?],
          supported_fields: ::Hash[Symbol, top?]
        }

        type type_ =
          :assisted | :credential | :api_token | :api_credential | :oauth | :api

        module Type
          extend FinchAPI::Internal::Type::Enum

          ASSISTED: :assisted
          CREDENTIAL: :credential
          API_TOKEN: :api_token
          API_CREDENTIAL: :api_credential
          OAUTH: :oauth
          API: :api

          def self?.values: -> ::Array[FinchAPI::Models::ProviderListResponse::AuthenticationMethod::type_]
        end
      end
    end
  end
end
