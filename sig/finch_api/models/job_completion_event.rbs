module FinchAPI
  module Models
    type job_completion_event =
      {
        data: FinchAPI::JobCompletionEvent::Data,
        event_type: FinchAPI::JobCompletionEvent::event_type
      }

    class JobCompletionEvent < FinchAPI::Models::BaseWebhookEvent
      def data: -> FinchAPI::JobCompletionEvent::Data?

      def data=: (
        FinchAPI::JobCompletionEvent::Data _
      ) -> FinchAPI::JobCompletionEvent::Data

      def event_type: -> FinchAPI::JobCompletionEvent::event_type?

      def event_type=: (
        FinchAPI::JobCompletionEvent::event_type _
      ) -> FinchAPI::JobCompletionEvent::event_type

      def initialize: (
        ?data: FinchAPI::JobCompletionEvent::Data,
        ?event_type: FinchAPI::JobCompletionEvent::event_type
      ) -> void

      type data = { job_id: String, job_url: String }

      class Data < FinchAPI::Internal::Type::BaseModel
        attr_accessor job_id: String

        attr_accessor job_url: String

        def initialize: (job_id: String, job_url: String) -> void
      end

      type event_type =
        :"job.benefit_create.completed"
        | :"job.benefit_enroll.completed"
        | :"job.benefit_register.completed"
        | :"job.benefit_unenroll.completed"
        | :"job.benefit_update.completed"
        | :"job.data_sync_all.completed"

      module EventType
        extend FinchAPI::Internal::Type::Enum

        JOB_BENEFIT_CREATE_COMPLETED: :"job.benefit_create.completed"
        JOB_BENEFIT_ENROLL_COMPLETED: :"job.benefit_enroll.completed"
        JOB_BENEFIT_REGISTER_COMPLETED: :"job.benefit_register.completed"
        JOB_BENEFIT_UNENROLL_COMPLETED: :"job.benefit_unenroll.completed"
        JOB_BENEFIT_UPDATE_COMPLETED: :"job.benefit_update.completed"
        JOB_DATA_SYNC_ALL_COMPLETED: :"job.data_sync_all.completed"

        def self?.values: -> ::Array[FinchAPI::JobCompletionEvent::event_type]
      end
    end
  end
end
