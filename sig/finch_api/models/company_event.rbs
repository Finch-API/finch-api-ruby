module FinchAPI
  module Models
    type company_event =
      {
        data: ::Hash[Symbol, top]?,
        event_type: FinchAPI::Models::CompanyEvent::event_type
      }

    class CompanyEvent < FinchAPI::Models::BaseWebhookEvent
      def data: -> ::Hash[Symbol, top]?

      def data=: (::Hash[Symbol, top]? _) -> ::Hash[Symbol, top]?

      def event_type: -> FinchAPI::Models::CompanyEvent::event_type?

      def event_type=: (
        FinchAPI::Models::CompanyEvent::event_type _
      ) -> FinchAPI::Models::CompanyEvent::event_type

      def initialize: (
        ?data: ::Hash[Symbol, top]?,
        ?event_type: FinchAPI::Models::CompanyEvent::event_type
      ) -> void

      def to_hash: -> {
        data: ::Hash[Symbol, top]?,
        event_type: FinchAPI::Models::CompanyEvent::event_type
      }

      type event_type = :"company.updated"

      module EventType
        extend FinchAPI::Internal::Type::Enum

        COMPANY_UPDATED: :"company.updated"

        def self?.values: -> ::Array[FinchAPI::Models::CompanyEvent::event_type]
      end
    end
  end
end
