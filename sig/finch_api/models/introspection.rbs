module FinchAPI
  module Models
    type introspection =
      {
        id: String,
        client_id: String,
        client_type: FinchAPI::Models::Introspection::client_type,
        connection_id: String,
        connection_status: FinchAPI::Introspection::ConnectionStatus,
        connection_type: FinchAPI::Models::Introspection::connection_type,
        products: ::Array[String],
        provider_id: String,
        account_id: String,
        authentication_methods: ::Array[FinchAPI::Introspection::AuthenticationMethod],
        company_id: String,
        customer_email: String?,
        customer_id: String?,
        customer_name: String?,
        manual: bool,
        payroll_provider_id: String,
        username: String?
      }

    class Introspection < FinchAPI::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor client_id: String

      attr_accessor client_type: FinchAPI::Models::Introspection::client_type

      attr_accessor connection_id: String

      attr_accessor connection_status: FinchAPI::Introspection::ConnectionStatus

      attr_accessor connection_type: FinchAPI::Models::Introspection::connection_type

      attr_accessor products: ::Array[String]

      attr_accessor provider_id: String

      attr_reader account_id: String?

      def account_id=: (String) -> String

      attr_reader authentication_methods: ::Array[FinchAPI::Introspection::AuthenticationMethod]?

      def authentication_methods=: (
        ::Array[FinchAPI::Introspection::AuthenticationMethod]
      ) -> ::Array[FinchAPI::Introspection::AuthenticationMethod]

      attr_reader company_id: String?

      def company_id=: (String) -> String

      attr_accessor customer_email: String?

      attr_accessor customer_id: String?

      attr_accessor customer_name: String?

      attr_reader manual: bool?

      def manual=: (bool) -> bool

      attr_reader payroll_provider_id: String?

      def payroll_provider_id=: (String) -> String

      attr_accessor username: String?

      def initialize: (
        id: String,
        client_id: String,
        client_type: FinchAPI::Models::Introspection::client_type,
        connection_id: String,
        connection_status: FinchAPI::Introspection::ConnectionStatus,
        connection_type: FinchAPI::Models::Introspection::connection_type,
        products: ::Array[String],
        provider_id: String,
        ?account_id: String,
        ?authentication_methods: ::Array[FinchAPI::Introspection::AuthenticationMethod],
        ?company_id: String,
        ?customer_email: String?,
        ?customer_id: String?,
        ?customer_name: String?,
        ?manual: bool,
        ?payroll_provider_id: String,
        ?username: String?
      ) -> void

      def to_hash: -> {
        id: String,
        client_id: String,
        client_type: FinchAPI::Models::Introspection::client_type,
        connection_id: String,
        connection_status: FinchAPI::Introspection::ConnectionStatus,
        connection_type: FinchAPI::Models::Introspection::connection_type,
        products: ::Array[String],
        provider_id: String,
        account_id: String,
        authentication_methods: ::Array[FinchAPI::Introspection::AuthenticationMethod],
        company_id: String,
        customer_email: String?,
        customer_id: String?,
        customer_name: String?,
        manual: bool,
        payroll_provider_id: String,
        username: String?
      }

      type client_type = :development | :production | :sandbox

      module ClientType
        extend FinchAPI::Internal::Type::Enum

        DEVELOPMENT: :development
        PRODUCTION: :production
        SANDBOX: :sandbox

        def self?.values: -> ::Array[FinchAPI::Models::Introspection::client_type]
      end

      type connection_status =
        {
          status: FinchAPI::Models::connection_status_type,
          last_successful_sync: FinchAPI::Models::Introspection::ConnectionStatus::last_successful_sync?,
          message: String
        }

      class ConnectionStatus < FinchAPI::Internal::Type::BaseModel
        attr_accessor status: FinchAPI::Models::connection_status_type

        attr_accessor last_successful_sync: FinchAPI::Models::Introspection::ConnectionStatus::last_successful_sync?

        attr_reader message: String?

        def message=: (String) -> String

        def initialize: (
          status: FinchAPI::Models::connection_status_type,
          ?last_successful_sync: FinchAPI::Models::Introspection::ConnectionStatus::last_successful_sync?,
          ?message: String
        ) -> void

        def to_hash: -> {
          status: FinchAPI::Models::connection_status_type,
          last_successful_sync: FinchAPI::Models::Introspection::ConnectionStatus::last_successful_sync?,
          message: String
        }

        type last_successful_sync = Time | String

        module LastSuccessfulSync
          extend FinchAPI::Internal::Type::Union

          def self?.variants: -> ::Array[FinchAPI::Models::Introspection::ConnectionStatus::last_successful_sync]
        end
      end

      type connection_type = :finch | :provider

      module ConnectionType
        extend FinchAPI::Internal::Type::Enum

        FINCH: :finch
        PROVIDER: :provider

        def self?.values: -> ::Array[FinchAPI::Models::Introspection::connection_type]
      end

      type authentication_method =
        {
          type: FinchAPI::Models::Introspection::AuthenticationMethod::type_,
          connection_status: FinchAPI::Introspection::AuthenticationMethod::ConnectionStatus,
          products: ::Array[String]
        }

      class AuthenticationMethod < FinchAPI::Internal::Type::BaseModel
        attr_accessor type: FinchAPI::Models::Introspection::AuthenticationMethod::type_

        attr_reader connection_status: FinchAPI::Introspection::AuthenticationMethod::ConnectionStatus?

        def connection_status=: (
          FinchAPI::Introspection::AuthenticationMethod::ConnectionStatus
        ) -> FinchAPI::Introspection::AuthenticationMethod::ConnectionStatus

        attr_reader products: ::Array[String]?

        def products=: (::Array[String]) -> ::Array[String]

        def initialize: (
          type: FinchAPI::Models::Introspection::AuthenticationMethod::type_,
          ?connection_status: FinchAPI::Introspection::AuthenticationMethod::ConnectionStatus,
          ?products: ::Array[String]
        ) -> void

        def to_hash: -> {
          type: FinchAPI::Models::Introspection::AuthenticationMethod::type_,
          connection_status: FinchAPI::Introspection::AuthenticationMethod::ConnectionStatus,
          products: ::Array[String]
        }

        type type_ =
          :assisted | :credential | :api_token | :api_credential | :oauth

        module Type
          extend FinchAPI::Internal::Type::Enum

          ASSISTED: :assisted
          CREDENTIAL: :credential
          API_TOKEN: :api_token
          API_CREDENTIAL: :api_credential
          OAUTH: :oauth

          def self?.values: -> ::Array[FinchAPI::Models::Introspection::AuthenticationMethod::type_]
        end

        type connection_status =
          {
            status: FinchAPI::Models::connection_status_type,
            last_successful_sync: FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus::last_successful_sync?,
            message: String
          }

        class ConnectionStatus < FinchAPI::Internal::Type::BaseModel
          attr_accessor status: FinchAPI::Models::connection_status_type

          attr_accessor last_successful_sync: FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus::last_successful_sync?

          attr_reader message: String?

          def message=: (String) -> String

          def initialize: (
            status: FinchAPI::Models::connection_status_type,
            ?last_successful_sync: FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus::last_successful_sync?,
            ?message: String
          ) -> void

          def to_hash: -> {
            status: FinchAPI::Models::connection_status_type,
            last_successful_sync: FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus::last_successful_sync?,
            message: String
          }

          type last_successful_sync = Time | String

          module LastSuccessfulSync
            extend FinchAPI::Internal::Type::Union

            def self?.variants: -> ::Array[FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus::last_successful_sync]
          end
        end
      end
    end
  end
end
