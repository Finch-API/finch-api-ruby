module FinchAPI
  module Models
    type individual_event =
      {
        data: FinchAPI::IndividualEvent::Data,
        event_type: FinchAPI::IndividualEvent::event_type
      }

    class IndividualEvent < FinchAPI::Models::BaseWebhookEvent
      def data: -> FinchAPI::IndividualEvent::Data?

      def data=: (
        FinchAPI::IndividualEvent::Data _
      ) -> FinchAPI::IndividualEvent::Data

      def event_type: -> FinchAPI::IndividualEvent::event_type?

      def event_type=: (
        FinchAPI::IndividualEvent::event_type _
      ) -> FinchAPI::IndividualEvent::event_type

      def initialize: (
        ?data: FinchAPI::IndividualEvent::Data,
        ?event_type: FinchAPI::IndividualEvent::event_type
      ) -> void

      type data = { individual_id: String }

      class Data < FinchAPI::Internal::Type::BaseModel
        attr_reader individual_id: String?

        def individual_id=: (String) -> String

        def initialize: (?individual_id: String) -> void
      end

      type event_type =
        :"individual.created" | :"individual.updated" | :"individual.deleted"

      module EventType
        extend FinchAPI::Internal::Type::Enum

        INDIVIDUAL_CREATED: :"individual.created"
        INDIVIDUAL_UPDATED: :"individual.updated"
        INDIVIDUAL_DELETED: :"individual.deleted"

        def self?.values: -> ::Array[FinchAPI::IndividualEvent::event_type]
      end
    end
  end
end
