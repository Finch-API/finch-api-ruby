module FinchAPI
  module Models
    type employment_event =
      {
        data: FinchAPI::EmploymentEvent::Data,
        event_type: FinchAPI::EmploymentEvent::event_type
      }

    class EmploymentEvent < FinchAPI::Models::BaseWebhookEvent
      def data: -> FinchAPI::EmploymentEvent::Data?

      def data=: (
        FinchAPI::EmploymentEvent::Data _
      ) -> FinchAPI::EmploymentEvent::Data

      def event_type: -> FinchAPI::EmploymentEvent::event_type?

      def event_type=: (
        FinchAPI::EmploymentEvent::event_type _
      ) -> FinchAPI::EmploymentEvent::event_type

      def initialize: (
        ?data: FinchAPI::EmploymentEvent::Data,
        ?event_type: FinchAPI::EmploymentEvent::event_type
      ) -> void

      type data = { individual_id: String }

      class Data < FinchAPI::Internal::Type::BaseModel
        attr_reader individual_id: String?

        def individual_id=: (String) -> String

        def initialize: (?individual_id: String) -> void
      end

      type event_type =
        :"employment.created" | :"employment.updated" | :"employment.deleted"

      module EventType
        extend FinchAPI::Internal::Type::Enum

        EMPLOYMENT_CREATED: :"employment.created"
        EMPLOYMENT_UPDATED: :"employment.updated"
        EMPLOYMENT_DELETED: :"employment.deleted"

        def self?.values: -> ::Array[FinchAPI::EmploymentEvent::event_type]
      end
    end
  end
end
