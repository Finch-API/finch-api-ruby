module FinchAPI
  module Models
    module Jobs
      type automated_list_response =
        {
          data: ::Array[FinchAPI::Jobs::AutomatedAsyncJob],
          meta: FinchAPI::Models::Jobs::AutomatedListResponse::Meta
        }

      class AutomatedListResponse < FinchAPI::Internal::Type::BaseModel
        attr_accessor data: ::Array[FinchAPI::Jobs::AutomatedAsyncJob]

        attr_accessor meta: FinchAPI::Models::Jobs::AutomatedListResponse::Meta

        def initialize: (
          data: ::Array[FinchAPI::Jobs::AutomatedAsyncJob],
          meta: FinchAPI::Models::Jobs::AutomatedListResponse::Meta
        ) -> void

        type meta =
          {
            quotas: FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas
          }

        class Meta < FinchAPI::Internal::Type::BaseModel
          attr_reader quotas: FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas?

          def quotas=: (
            FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas
          ) -> FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas

          def initialize: (
            ?quotas: FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas
          ) -> void

          type quotas =
            {
              data_sync_all: FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas::DataSyncAll
            }

          class Quotas < FinchAPI::Internal::Type::BaseModel
            attr_reader data_sync_all: FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas::DataSyncAll?

            def data_sync_all=: (
              FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas::DataSyncAll
            ) -> FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas::DataSyncAll

            def initialize: (
              ?data_sync_all: FinchAPI::Models::Jobs::AutomatedListResponse::Meta::Quotas::DataSyncAll
            ) -> void

            type data_sync_all =
              { allowed_refreshes: Integer, remaining_refreshes: Integer }

            class DataSyncAll < FinchAPI::Internal::Type::BaseModel
              attr_reader allowed_refreshes: Integer?

              def allowed_refreshes=: (Integer) -> Integer

              attr_reader remaining_refreshes: Integer?

              def remaining_refreshes=: (Integer) -> Integer

              def initialize: (
                ?allowed_refreshes: Integer,
                ?remaining_refreshes: Integer
              ) -> void
            end
          end
        end
      end
    end
  end
end
