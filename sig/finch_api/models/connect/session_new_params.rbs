module FinchAPI
  module Models
    module Connect
      type session_new_params =
        {
          customer_id: String,
          customer_name: String,
          products: ::Array[FinchAPI::Connect::SessionNewParams::product],
          customer_email: String?,
          integration: FinchAPI::Connect::SessionNewParams::Integration?,
          manual: bool?,
          minutes_to_expire: Float?,
          redirect_uri: String?,
          sandbox: FinchAPI::Models::Connect::SessionNewParams::sandbox?
        }
        & FinchAPI::Internal::Type::request_parameters

      class SessionNewParams < FinchAPI::Internal::Type::BaseModel
        extend FinchAPI::Internal::Type::RequestParameters::Converter
        include FinchAPI::Internal::Type::RequestParameters

        attr_accessor customer_id: String

        attr_accessor customer_name: String

        attr_accessor products: ::Array[FinchAPI::Connect::SessionNewParams::product]

        attr_accessor customer_email: String?

        attr_accessor integration: FinchAPI::Connect::SessionNewParams::Integration?

        attr_accessor manual: bool?

        attr_accessor minutes_to_expire: Float?

        attr_accessor redirect_uri: String?

        attr_accessor sandbox: FinchAPI::Models::Connect::SessionNewParams::sandbox?

        def initialize: (
          customer_id: String,
          customer_name: String,
          products: ::Array[FinchAPI::Connect::SessionNewParams::product],
          ?customer_email: String?,
          ?integration: FinchAPI::Connect::SessionNewParams::Integration?,
          ?manual: bool?,
          ?minutes_to_expire: Float?,
          ?redirect_uri: String?,
          ?sandbox: FinchAPI::Models::Connect::SessionNewParams::sandbox?,
          ?request_options: FinchAPI::request_opts
        ) -> void

        type product =
          :company
          | :directory
          | :individual
          | :employment
          | :payment
          | :pay_statement
          | :benefits
          | :ssn
          | :deduction
          | :documents

        module Product
          extend FinchAPI::Internal::Type::Enum

          COMPANY: :company
          DIRECTORY: :directory
          INDIVIDUAL: :individual
          EMPLOYMENT: :employment
          PAYMENT: :payment
          PAY_STATEMENT: :pay_statement
          BENEFITS: :benefits
          SSN: :ssn
          DEDUCTION: :deduction
          DOCUMENTS: :documents

          def self?.values: -> ::Array[FinchAPI::Connect::SessionNewParams::product]
        end

        type integration =
          {
            auth_method: FinchAPI::Connect::SessionNewParams::Integration::auth_method?,
            provider: String?
          }

        class Integration < FinchAPI::Internal::Type::BaseModel
          attr_accessor auth_method: FinchAPI::Connect::SessionNewParams::Integration::auth_method?

          attr_accessor provider: String?

          def initialize: (
            ?auth_method: FinchAPI::Connect::SessionNewParams::Integration::auth_method?,
            ?provider: String?
          ) -> void

          type auth_method = :assisted | :credential | :oauth | :api_token

          module AuthMethod
            extend FinchAPI::Internal::Type::Enum

            ASSISTED: :assisted
            CREDENTIAL: :credential
            OAUTH: :oauth
            API_TOKEN: :api_token

            def self?.values: -> ::Array[FinchAPI::Connect::SessionNewParams::Integration::auth_method]
          end
        end

        type sandbox = :finch | :provider

        module Sandbox
          extend FinchAPI::Internal::Type::Enum

          FINCH: :finch
          PROVIDER: :provider

          def self?.values: -> ::Array[FinchAPI::Models::Connect::SessionNewParams::sandbox]
        end
      end
    end
  end
end
