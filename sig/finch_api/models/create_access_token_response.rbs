module FinchAPI
  module Models
    type create_access_token_response =
      {
        access_token: String,
        client_type: FinchAPI::Models::CreateAccessTokenResponse::client_type,
        connection_id: String,
        connection_type: FinchAPI::Models::CreateAccessTokenResponse::connection_type,
        products: ::Array[String],
        provider_id: String,
        token_type: String,
        account_id: String,
        company_id: String,
        customer_id: String?
      }

    class CreateAccessTokenResponse < FinchAPI::Internal::Type::BaseModel
      attr_accessor access_token: String

      attr_accessor client_type: FinchAPI::Models::CreateAccessTokenResponse::client_type

      attr_accessor connection_id: String

      attr_accessor connection_type: FinchAPI::Models::CreateAccessTokenResponse::connection_type

      attr_accessor products: ::Array[String]

      attr_accessor provider_id: String

      attr_accessor token_type: String

      attr_reader account_id: String?

      def account_id=: (String) -> String

      attr_reader company_id: String?

      def company_id=: (String) -> String

      attr_accessor customer_id: String?

      def initialize: (
        access_token: String,
        client_type: FinchAPI::Models::CreateAccessTokenResponse::client_type,
        connection_id: String,
        connection_type: FinchAPI::Models::CreateAccessTokenResponse::connection_type,
        products: ::Array[String],
        provider_id: String,
        token_type: String,
        ?account_id: String,
        ?company_id: String,
        ?customer_id: String?
      ) -> void

      def to_hash: -> {
        access_token: String,
        client_type: FinchAPI::Models::CreateAccessTokenResponse::client_type,
        connection_id: String,
        connection_type: FinchAPI::Models::CreateAccessTokenResponse::connection_type,
        products: ::Array[String],
        provider_id: String,
        token_type: String,
        account_id: String,
        company_id: String,
        customer_id: String?
      }

      type client_type = :development | :production | :sandbox

      module ClientType
        extend FinchAPI::Internal::Type::Enum

        DEVELOPMENT: :development
        PRODUCTION: :production
        SANDBOX: :sandbox

        def self?.values: -> ::Array[FinchAPI::Models::CreateAccessTokenResponse::client_type]
      end

      type connection_type = :finch | :provider

      module ConnectionType
        extend FinchAPI::Internal::Type::Enum

        FINCH: :finch
        PROVIDER: :provider

        def self?.values: -> ::Array[FinchAPI::Models::CreateAccessTokenResponse::connection_type]
      end
    end
  end
end
