module FinchAPI
  module Models
    module HRIS
      type individual =
        FinchAPI::HRIS::Individual::UnionMember0
        | FinchAPI::HRIS::Individual::BatchError

      module Individual
        extend FinchAPI::Internal::Type::Union

        type union_member0 =
          {
            id: String,
            dob: String?,
            ethnicity: FinchAPI::HRIS::Individual::UnionMember0::ethnicity?,
            first_name: String?,
            gender: FinchAPI::HRIS::Individual::UnionMember0::gender?,
            last_name: String?,
            middle_name: String?,
            phone_numbers: ::Array[FinchAPI::HRIS::Individual::UnionMember0::PhoneNumber?]?,
            preferred_name: String?,
            residence: FinchAPI::Location?,
            emails: ::Array[FinchAPI::HRIS::Individual::UnionMember0::Email]?,
            encrypted_ssn: String?,
            ssn: String?
          }

        class UnionMember0 < FinchAPI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor dob: String?

          attr_accessor ethnicity: FinchAPI::HRIS::Individual::UnionMember0::ethnicity?

          attr_accessor first_name: String?

          attr_accessor gender: FinchAPI::HRIS::Individual::UnionMember0::gender?

          attr_accessor last_name: String?

          attr_accessor middle_name: String?

          attr_accessor phone_numbers: ::Array[FinchAPI::HRIS::Individual::UnionMember0::PhoneNumber?]?

          attr_accessor preferred_name: String?

          attr_accessor residence: FinchAPI::Location?

          attr_accessor emails: ::Array[FinchAPI::HRIS::Individual::UnionMember0::Email]?

          attr_accessor encrypted_ssn: String?

          attr_accessor ssn: String?

          def initialize: (
            id: String,
            dob: String?,
            ethnicity: FinchAPI::HRIS::Individual::UnionMember0::ethnicity?,
            first_name: String?,
            gender: FinchAPI::HRIS::Individual::UnionMember0::gender?,
            last_name: String?,
            middle_name: String?,
            phone_numbers: ::Array[FinchAPI::HRIS::Individual::UnionMember0::PhoneNumber?]?,
            preferred_name: String?,
            residence: FinchAPI::Location?,
            ?emails: ::Array[FinchAPI::HRIS::Individual::UnionMember0::Email]?,
            ?encrypted_ssn: String?,
            ?ssn: String?
          ) -> void

          type ethnicity =
            :asian
            | :white
            | :black_or_african_american
            | :native_hawaiian_or_pacific_islander
            | :american_indian_or_alaska_native
            | :hispanic_or_latino
            | :two_or_more_races
            | :decline_to_specify

          module Ethnicity
            extend FinchAPI::Internal::Type::Enum

            ASIAN: :asian
            WHITE: :white
            BLACK_OR_AFRICAN_AMERICAN: :black_or_african_american
            NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER: :native_hawaiian_or_pacific_islander
            AMERICAN_INDIAN_OR_ALASKA_NATIVE: :american_indian_or_alaska_native
            HISPANIC_OR_LATINO: :hispanic_or_latino
            TWO_OR_MORE_RACES: :two_or_more_races
            DECLINE_TO_SPECIFY: :decline_to_specify

            def self?.values: -> ::Array[FinchAPI::HRIS::Individual::UnionMember0::ethnicity]
          end

          type gender = :female | :male | :other | :decline_to_specify

          module Gender
            extend FinchAPI::Internal::Type::Enum

            FEMALE: :female
            MALE: :male
            OTHER: :other
            DECLINE_TO_SPECIFY: :decline_to_specify

            def self?.values: -> ::Array[FinchAPI::HRIS::Individual::UnionMember0::gender]
          end

          type phone_number =
            {
              data: String?,
              type: FinchAPI::HRIS::Individual::UnionMember0::PhoneNumber::type_?
            }

          class PhoneNumber < FinchAPI::Internal::Type::BaseModel
            attr_accessor data: String?

            attr_accessor type: FinchAPI::HRIS::Individual::UnionMember0::PhoneNumber::type_?

            def initialize: (
              data: String?,
              type: FinchAPI::HRIS::Individual::UnionMember0::PhoneNumber::type_?
            ) -> void

            type type_ = :work | :personal

            module Type
              extend FinchAPI::Internal::Type::Enum

              WORK: :work
              PERSONAL: :personal

              def self?.values: -> ::Array[FinchAPI::HRIS::Individual::UnionMember0::PhoneNumber::type_]
            end
          end

          type email =
            {
              data: String,
              type: FinchAPI::HRIS::Individual::UnionMember0::Email::type_?
            }

          class Email < FinchAPI::Internal::Type::BaseModel
            attr_accessor data: String

            attr_accessor type: FinchAPI::HRIS::Individual::UnionMember0::Email::type_?

            def initialize: (
              data: String,
              type: FinchAPI::HRIS::Individual::UnionMember0::Email::type_?
            ) -> void

            type type_ = :work | :personal

            module Type
              extend FinchAPI::Internal::Type::Enum

              WORK: :work
              PERSONAL: :personal

              def self?.values: -> ::Array[FinchAPI::HRIS::Individual::UnionMember0::Email::type_]
            end
          end
        end

        type batch_error =
          { code: Float, message: String, name: String, finch_code: String }

        class BatchError < FinchAPI::Internal::Type::BaseModel
          attr_accessor code: Float

          attr_accessor message: String

          attr_accessor name: String

          attr_reader finch_code: String?

          def finch_code=: (String) -> String

          def initialize: (
            code: Float,
            message: String,
            name: String,
            ?finch_code: String
          ) -> void
        end

        def self?.variants: -> ::Array[FinchAPI::Models::HRIS::individual]
      end
    end
  end
end
