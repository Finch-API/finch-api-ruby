module FinchAPI
  module Models
    module HRIS
      class IndividualBenefit = Benefits::IndividualBenefit

      module Benefits
        type individual_benefit =
          {
            body: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::body,
            code: Integer,
            individual_id: String
          }

        class IndividualBenefit < FinchAPI::Internal::Type::BaseModel
          attr_accessor body: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::body

          attr_accessor code: Integer

          attr_accessor individual_id: String

          def initialize: (
            body: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::body,
            code: Integer,
            individual_id: String
          ) -> void

          def to_hash: -> {
            body: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::body,
            code: Integer,
            individual_id: String
          }

          type body =
            FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0
            | FinchAPI::HRIS::Benefits::IndividualBenefit::Body::BatchError

          module Body
            extend FinchAPI::Internal::Type::Union

            type union_member0 =
              {
                annual_maximum: Integer?,
                catch_up: bool?,
                company_contribution: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::company_contribution?,
                employee_deduction: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::employee_deduction?,
                hsa_contribution_limit: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::hsa_contribution_limit?
              }

            class UnionMember0 < FinchAPI::Internal::Type::BaseModel
              attr_accessor annual_maximum: Integer?

              attr_accessor catch_up: bool?

              attr_accessor company_contribution: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::company_contribution?

              attr_accessor employee_deduction: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::employee_deduction?

              attr_accessor hsa_contribution_limit: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::hsa_contribution_limit?

              def initialize: (
                annual_maximum: Integer?,
                catch_up: bool?,
                company_contribution: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::company_contribution?,
                employee_deduction: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::employee_deduction?,
                ?hsa_contribution_limit: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::hsa_contribution_limit?
              ) -> void

              def to_hash: -> {
                annual_maximum: Integer?,
                catch_up: bool?,
                company_contribution: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::company_contribution?,
                employee_deduction: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::employee_deduction?,
                hsa_contribution_limit: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::hsa_contribution_limit?
              }

              type company_contribution =
                FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember0
                | FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember1
                | FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2

              module CompanyContribution
                extend FinchAPI::Internal::Type::Union

                type union_member0 =
                  {
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember0::type_
                  }

                class UnionMember0 < FinchAPI::Internal::Type::BaseModel
                  attr_accessor amount: Integer

                  attr_accessor type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember0::type_

                  def initialize: (
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember0::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember0::type_
                  }

                  type type_ = :fixed

                  module Type
                    extend FinchAPI::Internal::Type::Enum

                    FIXED: :fixed

                    def self?.values: -> ::Array[FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember0::type_]
                  end
                end

                type union_member1 =
                  {
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember1::type_
                  }

                class UnionMember1 < FinchAPI::Internal::Type::BaseModel
                  attr_accessor amount: Integer

                  attr_accessor type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember1::type_

                  def initialize: (
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember1::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember1::type_
                  }

                  type type_ = :percent

                  module Type
                    extend FinchAPI::Internal::Type::Enum

                    PERCENT: :percent

                    def self?.values: -> ::Array[FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember1::type_]
                  end
                end

                type union_member2 =
                  {
                    tiers: ::Array[FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2::Tier],
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2::type_
                  }

                class UnionMember2 < FinchAPI::Internal::Type::BaseModel
                  attr_accessor tiers: ::Array[FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2::Tier]

                  attr_accessor type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2::type_

                  def initialize: (
                    tiers: ::Array[FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2::Tier],
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2::type_
                  ) -> void

                  def to_hash: -> {
                    tiers: ::Array[FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2::Tier],
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2::type_
                  }

                  type tier = { match: Integer, threshold: Integer }

                  class Tier < FinchAPI::Internal::Type::BaseModel
                    attr_accessor match: Integer

                    attr_accessor threshold: Integer

                    def initialize: (match: Integer, threshold: Integer) -> void

                    def to_hash: -> { match: Integer, threshold: Integer }
                  end

                  type type_ = :tiered

                  module Type
                    extend FinchAPI::Internal::Type::Enum

                    TIERED: :tiered

                    def self?.values: -> ::Array[FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::CompanyContribution::UnionMember2::type_]
                  end
                end

                def self?.variants: -> ::Array[FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::company_contribution]
              end

              type employee_deduction =
                FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember0
                | FinchAPI::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember1

              module EmployeeDeduction
                extend FinchAPI::Internal::Type::Union

                type union_member0 =
                  {
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember0::type_
                  }

                class UnionMember0 < FinchAPI::Internal::Type::BaseModel
                  attr_accessor amount: Integer

                  attr_accessor type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember0::type_

                  def initialize: (
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember0::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember0::type_
                  }

                  type type_ = :fixed

                  module Type
                    extend FinchAPI::Internal::Type::Enum

                    FIXED: :fixed

                    def self?.values: -> ::Array[FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember0::type_]
                  end
                end

                type union_member1 =
                  {
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember1::type_
                  }

                class UnionMember1 < FinchAPI::Internal::Type::BaseModel
                  attr_accessor amount: Integer

                  attr_accessor type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember1::type_

                  def initialize: (
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember1::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Integer,
                    type: FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember1::type_
                  }

                  type type_ = :percent

                  module Type
                    extend FinchAPI::Internal::Type::Enum

                    PERCENT: :percent

                    def self?.values: -> ::Array[FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::EmployeeDeduction::UnionMember1::type_]
                  end
                end

                def self?.variants: -> ::Array[FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::employee_deduction]
              end

              type hsa_contribution_limit = :individual | :family

              module HsaContributionLimit
                extend FinchAPI::Internal::Type::Enum

                INDIVIDUAL: :individual
                FAMILY: :family

                def self?.values: -> ::Array[FinchAPI::Models::HRIS::Benefits::IndividualBenefit::Body::UnionMember0::hsa_contribution_limit]
              end
            end

            type batch_error =
              { code: Float, message: String, name: String, finch_code: String }

            class BatchError < FinchAPI::Internal::Type::BaseModel
              attr_accessor code: Float

              attr_accessor message: String

              attr_accessor name: String

              attr_reader finch_code: String?

              def finch_code=: (String) -> String

              def initialize: (
                code: Float,
                message: String,
                name: String,
                ?finch_code: String
              ) -> void

              def to_hash: -> {
                code: Float,
                message: String,
                name: String,
                finch_code: String
              }
            end

            def self?.variants: -> ::Array[FinchAPI::Models::HRIS::Benefits::IndividualBenefit::body]
          end
        end
      end
    end
  end
end
