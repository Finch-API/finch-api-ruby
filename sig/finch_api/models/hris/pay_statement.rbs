module FinchAPI
  module Models
    module HRIS
      type pay_statement =
        {
          earnings: ::Array[FinchAPI::HRIS::PayStatement::Earning?]?,
          employee_deductions: ::Array[FinchAPI::HRIS::PayStatement::EmployeeDeduction?]?,
          employer_contributions: ::Array[FinchAPI::HRIS::PayStatement::EmployerContribution?]?,
          gross_pay: FinchAPI::Money?,
          individual_id: String,
          net_pay: FinchAPI::Money?,
          payment_method: FinchAPI::HRIS::PayStatement::payment_method?,
          taxes: ::Array[FinchAPI::HRIS::PayStatement::Tax?]?,
          total_hours: Float?,
          type: FinchAPI::HRIS::PayStatement::type_?
        }

      class PayStatement < FinchAPI::Internal::Type::BaseModel
        attr_accessor earnings: ::Array[FinchAPI::HRIS::PayStatement::Earning?]?

        attr_accessor employee_deductions: ::Array[FinchAPI::HRIS::PayStatement::EmployeeDeduction?]?

        attr_accessor employer_contributions: ::Array[FinchAPI::HRIS::PayStatement::EmployerContribution?]?

        attr_accessor gross_pay: FinchAPI::Money?

        attr_accessor individual_id: String

        attr_accessor net_pay: FinchAPI::Money?

        attr_accessor payment_method: FinchAPI::HRIS::PayStatement::payment_method?

        attr_accessor taxes: ::Array[FinchAPI::HRIS::PayStatement::Tax?]?

        attr_accessor total_hours: Float?

        attr_accessor type: FinchAPI::HRIS::PayStatement::type_?

        def initialize: (
          earnings: ::Array[FinchAPI::HRIS::PayStatement::Earning?]?,
          employee_deductions: ::Array[FinchAPI::HRIS::PayStatement::EmployeeDeduction?]?,
          employer_contributions: ::Array[FinchAPI::HRIS::PayStatement::EmployerContribution?]?,
          gross_pay: FinchAPI::Money?,
          individual_id: String,
          net_pay: FinchAPI::Money?,
          payment_method: FinchAPI::HRIS::PayStatement::payment_method?,
          taxes: ::Array[FinchAPI::HRIS::PayStatement::Tax?]?,
          total_hours: Float?,
          type: FinchAPI::HRIS::PayStatement::type_?
        ) -> void

        type earning =
          {
            amount: Integer?,
            currency: String?,
            hours: Float?,
            name: String?,
            type: FinchAPI::HRIS::PayStatement::Earning::type_?,
            attributes: FinchAPI::HRIS::PayStatement::Earning::Attributes?
          }

        class Earning < FinchAPI::Internal::Type::BaseModel
          attr_accessor amount: Integer?

          attr_accessor currency: String?

          attr_accessor hours: Float?

          attr_accessor name: String?

          attr_accessor type: FinchAPI::HRIS::PayStatement::Earning::type_?

          attr_accessor attributes: FinchAPI::HRIS::PayStatement::Earning::Attributes?

          def initialize: (
            amount: Integer?,
            currency: String?,
            hours: Float?,
            name: String?,
            type: FinchAPI::HRIS::PayStatement::Earning::type_?,
            ?attributes: FinchAPI::HRIS::PayStatement::Earning::Attributes?
          ) -> void

          type type_ =
            :salary
            | :wage
            | :reimbursement
            | :overtime
            | :severance
            | :double_overtime
            | :pto
            | :sick
            | :bonus
            | :commission
            | :tips
            | :"1099"
            | :other

          module Type
            extend FinchAPI::Internal::Type::Enum

            SALARY: :salary
            WAGE: :wage
            REIMBURSEMENT: :reimbursement
            OVERTIME: :overtime
            SEVERANCE: :severance
            DOUBLE_OVERTIME: :double_overtime
            PTO: :pto
            SICK: :sick
            BONUS: :bonus
            COMMISSION: :commission
            TIPS: :tips
            TYPE_1099: :"1099"
            OTHER: :other

            def self?.values: -> ::Array[FinchAPI::HRIS::PayStatement::Earning::type_]
          end

          type attributes =
            {
              metadata: FinchAPI::HRIS::PayStatement::Earning::Attributes::Metadata
            }

          class Attributes < FinchAPI::Internal::Type::BaseModel
            attr_accessor metadata: FinchAPI::HRIS::PayStatement::Earning::Attributes::Metadata

            def initialize: (
              metadata: FinchAPI::HRIS::PayStatement::Earning::Attributes::Metadata
            ) -> void

            type metadata = { metadata: ::Hash[Symbol, top?] }

            class Metadata < FinchAPI::Internal::Type::BaseModel
              attr_accessor metadata: ::Hash[Symbol, top?]

              def initialize: (metadata: ::Hash[Symbol, top?]) -> void
            end
          end
        end

        type employee_deduction =
          {
            amount: Integer?,
            currency: String?,
            name: String?,
            pre_tax: bool?,
            type: FinchAPI::Models::HRIS::benefit_type?,
            attributes: FinchAPI::HRIS::PayStatement::EmployeeDeduction::Attributes?
          }

        class EmployeeDeduction < FinchAPI::Internal::Type::BaseModel
          attr_accessor amount: Integer?

          attr_accessor currency: String?

          attr_accessor name: String?

          attr_accessor pre_tax: bool?

          attr_accessor type: FinchAPI::Models::HRIS::benefit_type?

          attr_accessor attributes: FinchAPI::HRIS::PayStatement::EmployeeDeduction::Attributes?

          def initialize: (
            amount: Integer?,
            currency: String?,
            name: String?,
            pre_tax: bool?,
            type: FinchAPI::Models::HRIS::benefit_type?,
            ?attributes: FinchAPI::HRIS::PayStatement::EmployeeDeduction::Attributes?
          ) -> void

          type attributes =
            {
              metadata: FinchAPI::HRIS::PayStatement::EmployeeDeduction::Attributes::Metadata
            }

          class Attributes < FinchAPI::Internal::Type::BaseModel
            attr_accessor metadata: FinchAPI::HRIS::PayStatement::EmployeeDeduction::Attributes::Metadata

            def initialize: (
              metadata: FinchAPI::HRIS::PayStatement::EmployeeDeduction::Attributes::Metadata
            ) -> void

            type metadata = { metadata: ::Hash[Symbol, top?] }

            class Metadata < FinchAPI::Internal::Type::BaseModel
              attr_accessor metadata: ::Hash[Symbol, top?]

              def initialize: (metadata: ::Hash[Symbol, top?]) -> void
            end
          end
        end

        type employer_contribution =
          {
            amount: Integer?,
            currency: String?,
            name: String?,
            type: FinchAPI::Models::HRIS::benefit_type?,
            attributes: FinchAPI::HRIS::PayStatement::EmployerContribution::Attributes?
          }

        class EmployerContribution < FinchAPI::Internal::Type::BaseModel
          attr_accessor amount: Integer?

          attr_accessor currency: String?

          attr_accessor name: String?

          attr_accessor type: FinchAPI::Models::HRIS::benefit_type?

          attr_accessor attributes: FinchAPI::HRIS::PayStatement::EmployerContribution::Attributes?

          def initialize: (
            amount: Integer?,
            currency: String?,
            name: String?,
            type: FinchAPI::Models::HRIS::benefit_type?,
            ?attributes: FinchAPI::HRIS::PayStatement::EmployerContribution::Attributes?
          ) -> void

          type attributes =
            {
              metadata: FinchAPI::HRIS::PayStatement::EmployerContribution::Attributes::Metadata
            }

          class Attributes < FinchAPI::Internal::Type::BaseModel
            attr_accessor metadata: FinchAPI::HRIS::PayStatement::EmployerContribution::Attributes::Metadata

            def initialize: (
              metadata: FinchAPI::HRIS::PayStatement::EmployerContribution::Attributes::Metadata
            ) -> void

            type metadata = { metadata: ::Hash[Symbol, top?] }

            class Metadata < FinchAPI::Internal::Type::BaseModel
              attr_accessor metadata: ::Hash[Symbol, top?]

              def initialize: (metadata: ::Hash[Symbol, top?]) -> void
            end
          end
        end

        type payment_method = :check | :direct_deposit

        module PaymentMethod
          extend FinchAPI::Internal::Type::Enum

          CHECK: :check
          DIRECT_DEPOSIT: :direct_deposit

          def self?.values: -> ::Array[FinchAPI::HRIS::PayStatement::payment_method]
        end

        type tax =
          {
            amount: Integer?,
            currency: String?,
            employer: bool?,
            name: String?,
            type: FinchAPI::HRIS::PayStatement::Tax::type_?,
            attributes: FinchAPI::HRIS::PayStatement::Tax::Attributes?
          }

        class Tax < FinchAPI::Internal::Type::BaseModel
          attr_accessor amount: Integer?

          attr_accessor currency: String?

          attr_accessor employer: bool?

          attr_accessor name: String?

          attr_accessor type: FinchAPI::HRIS::PayStatement::Tax::type_?

          attr_accessor attributes: FinchAPI::HRIS::PayStatement::Tax::Attributes?

          def initialize: (
            amount: Integer?,
            currency: String?,
            employer: bool?,
            name: String?,
            type: FinchAPI::HRIS::PayStatement::Tax::type_?,
            ?attributes: FinchAPI::HRIS::PayStatement::Tax::Attributes?
          ) -> void

          type type_ = :state | :federal | :local | :fica

          module Type
            extend FinchAPI::Internal::Type::Enum

            STATE: :state
            FEDERAL: :federal
            LOCAL: :local
            FICA: :fica

            def self?.values: -> ::Array[FinchAPI::HRIS::PayStatement::Tax::type_]
          end

          type attributes =
            {
              metadata: FinchAPI::HRIS::PayStatement::Tax::Attributes::Metadata
            }

          class Attributes < FinchAPI::Internal::Type::BaseModel
            attr_accessor metadata: FinchAPI::HRIS::PayStatement::Tax::Attributes::Metadata

            def initialize: (
              metadata: FinchAPI::HRIS::PayStatement::Tax::Attributes::Metadata
            ) -> void

            type metadata = { metadata: ::Hash[Symbol, top?] }

            class Metadata < FinchAPI::Internal::Type::BaseModel
              attr_accessor metadata: ::Hash[Symbol, top?]

              def initialize: (metadata: ::Hash[Symbol, top?]) -> void
            end
          end
        end

        type type_ = :regular_payroll | :off_cycle_payroll | :one_time_payment

        module Type
          extend FinchAPI::Internal::Type::Enum

          REGULAR_PAYROLL: :regular_payroll
          OFF_CYCLE_PAYROLL: :off_cycle_payroll
          ONE_TIME_PAYMENT: :one_time_payment

          def self?.values: -> ::Array[FinchAPI::HRIS::PayStatement::type_]
        end
      end
    end
  end
end
