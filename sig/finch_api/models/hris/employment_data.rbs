module FinchAPI
  module Models
    module HRIS
      type employment_data =
        {
          id: String,
          class_code: String?,
          custom_fields: ::Array[FinchAPI::Models::HRIS::EmploymentData::CustomField]?,
          department: FinchAPI::Models::HRIS::EmploymentData::Department?,
          employment: FinchAPI::Models::HRIS::EmploymentData::Employment?,
          employment_status: FinchAPI::Models::HRIS::EmploymentData::employment_status?,
          end_date: String?,
          first_name: String?,
          income: FinchAPI::Models::Income?,
          income_history: ::Array[FinchAPI::Models::Income?]?,
          is_active: bool?,
          last_name: String?,
          latest_rehire_date: String?,
          location: FinchAPI::Models::Location?,
          manager: FinchAPI::Models::HRIS::EmploymentData::Manager?,
          middle_name: String?,
          source_id: String?,
          start_date: String?,
          title: String?,
          work_id: String?
        }

      class EmploymentData < FinchAPI::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_accessor class_code: String?

        attr_accessor custom_fields: ::Array[FinchAPI::Models::HRIS::EmploymentData::CustomField]?

        attr_accessor department: FinchAPI::Models::HRIS::EmploymentData::Department?

        attr_accessor employment: FinchAPI::Models::HRIS::EmploymentData::Employment?

        attr_accessor employment_status: FinchAPI::Models::HRIS::EmploymentData::employment_status?

        attr_accessor end_date: String?

        attr_accessor first_name: String?

        attr_accessor income: FinchAPI::Models::Income?

        attr_accessor income_history: ::Array[FinchAPI::Models::Income?]?

        attr_accessor is_active: bool?

        attr_accessor last_name: String?

        attr_accessor latest_rehire_date: String?

        attr_accessor location: FinchAPI::Models::Location?

        attr_accessor manager: FinchAPI::Models::HRIS::EmploymentData::Manager?

        attr_accessor middle_name: String?

        attr_accessor source_id: String?

        attr_accessor start_date: String?

        attr_accessor title: String?

        attr_accessor work_id: String?

        def initialize: (
          ?id: String,
          ?class_code: String?,
          ?custom_fields: ::Array[FinchAPI::Models::HRIS::EmploymentData::CustomField]?,
          ?department: FinchAPI::Models::HRIS::EmploymentData::Department?,
          ?employment: FinchAPI::Models::HRIS::EmploymentData::Employment?,
          ?employment_status: FinchAPI::Models::HRIS::EmploymentData::employment_status?,
          ?end_date: String?,
          ?first_name: String?,
          ?income: FinchAPI::Models::Income?,
          ?income_history: ::Array[FinchAPI::Models::Income?]?,
          ?is_active: bool?,
          ?last_name: String?,
          ?latest_rehire_date: String?,
          ?location: FinchAPI::Models::Location?,
          ?manager: FinchAPI::Models::HRIS::EmploymentData::Manager?,
          ?middle_name: String?,
          ?source_id: String?,
          ?start_date: String?,
          ?title: String?,
          ?work_id: String?
        ) -> void

        def to_hash: -> FinchAPI::Models::HRIS::employment_data

        type custom_field = { name: String, value: top }

        class CustomField < FinchAPI::BaseModel
          attr_reader name: String?

          def name=: (String) -> String

          attr_reader value: top?

          def value=: (top) -> top

          def initialize: (?name: String, ?value: top) -> void

          def to_hash: -> FinchAPI::Models::HRIS::EmploymentData::custom_field
        end

        type department = { name: String? }

        class Department < FinchAPI::BaseModel
          attr_accessor name: String?

          def initialize: (?name: String?) -> void

          def to_hash: -> FinchAPI::Models::HRIS::EmploymentData::department
        end

        type employment =
          {
            subtype: FinchAPI::Models::HRIS::EmploymentData::Employment::subtype?,
            type: FinchAPI::Models::HRIS::EmploymentData::Employment::type_?
          }

        class Employment < FinchAPI::BaseModel
          attr_accessor subtype: FinchAPI::Models::HRIS::EmploymentData::Employment::subtype?

          attr_accessor type: FinchAPI::Models::HRIS::EmploymentData::Employment::type_?

          def initialize: (
            ?subtype: FinchAPI::Models::HRIS::EmploymentData::Employment::subtype?,
            ?type: FinchAPI::Models::HRIS::EmploymentData::Employment::type_?
          ) -> void

          def to_hash: -> FinchAPI::Models::HRIS::EmploymentData::employment

          type subtype =
            :full_time
            | :intern
            | :part_time
            | :temp
            | :seasonal
            | :individual_contractor

          module Subtype
            extend FinchAPI::Enum

            FULL_TIME: :full_time
            INTERN: :intern
            PART_TIME: :part_time
            TEMP: :temp
            SEASONAL: :seasonal
            INDIVIDUAL_CONTRACTOR: :individual_contractor

            def self?.values: -> ::Array[FinchAPI::Models::HRIS::EmploymentData::Employment::subtype]
          end

          type type_ = :employee | :contractor

          module Type
            extend FinchAPI::Enum

            EMPLOYEE: :employee
            CONTRACTOR: :contractor

            def self?.values: -> ::Array[FinchAPI::Models::HRIS::EmploymentData::Employment::type_]
          end
        end

        type employment_status =
          :active
          | :deceased
          | :leave
          | :onboarding
          | :prehire
          | :retired
          | :terminated

        module EmploymentStatus
          extend FinchAPI::Enum

          ACTIVE: :active
          DECEASED: :deceased
          LEAVE: :leave
          ONBOARDING: :onboarding
          PREHIRE: :prehire
          RETIRED: :retired
          TERMINATED: :terminated

          def self?.values: -> ::Array[FinchAPI::Models::HRIS::EmploymentData::employment_status]
        end

        type manager = { id: String }

        class Manager < FinchAPI::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          def initialize: (?id: String) -> void

          def to_hash: -> FinchAPI::Models::HRIS::EmploymentData::manager
        end
      end
    end
  end
end
