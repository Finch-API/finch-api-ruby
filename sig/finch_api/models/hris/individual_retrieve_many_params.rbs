module FinchAPI
  module Models
    module HRIS
      type individual_retrieve_many_params =
        {
          options: FinchAPI::HRIS::IndividualRetrieveManyParams::Options?,
          requests: ::Array[FinchAPI::HRIS::IndividualRetrieveManyParams::Request]
        }
        & FinchAPI::Internal::Type::request_parameters

      class IndividualRetrieveManyParams < FinchAPI::Internal::Type::BaseModel
        extend FinchAPI::Internal::Type::RequestParameters::Converter
        include FinchAPI::Internal::Type::RequestParameters

        attr_accessor options: FinchAPI::HRIS::IndividualRetrieveManyParams::Options?

        attr_reader requests: ::Array[FinchAPI::HRIS::IndividualRetrieveManyParams::Request]?

        def requests=: (
          ::Array[FinchAPI::HRIS::IndividualRetrieveManyParams::Request]
        ) -> ::Array[FinchAPI::HRIS::IndividualRetrieveManyParams::Request]

        def initialize: (
          ?options: FinchAPI::HRIS::IndividualRetrieveManyParams::Options?,
          ?requests: ::Array[FinchAPI::HRIS::IndividualRetrieveManyParams::Request],
          ?request_options: FinchAPI::request_opts
        ) -> void

        type options = { include: ::Array[String] }

        class Options < FinchAPI::Internal::Type::BaseModel
          attr_reader include: ::Array[String]?

          def include=: (::Array[String]) -> ::Array[String]

          def initialize: (?include: ::Array[String]) -> void
        end

        type request = { individual_id: String }

        class Request < FinchAPI::Internal::Type::BaseModel
          attr_reader individual_id: String?

          def individual_id=: (String) -> String

          def initialize: (?individual_id: String) -> void
        end
      end
    end
  end
end
