module FinchAPI
  module Models
    module HRIS
      type pay_statement_response_body =
        FinchAPI::HRIS::PayStatementResponseBody::UnionMember0
        | FinchAPI::HRIS::PayStatementResponseBody::BatchError
        | FinchAPI::HRIS::PayStatementResponseBody::UnionMember2

      module PayStatementResponseBody
        extend FinchAPI::Internal::Type::Union

        type union_member0 =
          {
            paging: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::Paging,
            pay_statements: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement]
          }

        class UnionMember0 < FinchAPI::Internal::Type::BaseModel
          attr_accessor paging: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::Paging

          attr_accessor pay_statements: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement]

          def initialize: (
            paging: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::Paging,
            pay_statements: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement]
          ) -> void

          def to_hash: -> {
            paging: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::Paging,
            pay_statements: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement]
          }

          type paging = { offset: Integer, count: Integer }

          class Paging < FinchAPI::Internal::Type::BaseModel
            attr_accessor offset: Integer

            attr_reader count: Integer?

            def count=: (Integer) -> Integer

            def initialize: (offset: Integer, ?count: Integer) -> void

            def to_hash: -> { offset: Integer, count: Integer }
          end

          type pay_statement =
            {
              earnings: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning?]?,
              employee_deductions: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction?]?,
              employer_contributions: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution?]?,
              gross_pay: FinchAPI::Money?,
              individual_id: String,
              net_pay: FinchAPI::Money?,
              payment_method: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::payment_method?,
              taxes: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax?]?,
              total_hours: Float?,
              type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::type_?
            }

          class PayStatement < FinchAPI::Internal::Type::BaseModel
            attr_accessor earnings: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning?]?

            attr_accessor employee_deductions: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction?]?

            attr_accessor employer_contributions: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution?]?

            attr_accessor gross_pay: FinchAPI::Money?

            attr_accessor individual_id: String

            attr_accessor net_pay: FinchAPI::Money?

            attr_accessor payment_method: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::payment_method?

            attr_accessor taxes: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax?]?

            attr_accessor total_hours: Float?

            attr_accessor type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::type_?

            def initialize: (
              earnings: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning?]?,
              employee_deductions: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction?]?,
              employer_contributions: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution?]?,
              gross_pay: FinchAPI::Money?,
              individual_id: String,
              net_pay: FinchAPI::Money?,
              payment_method: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::payment_method?,
              taxes: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax?]?,
              total_hours: Float?,
              type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::type_?
            ) -> void

            def to_hash: -> {
              earnings: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning?]?,
              employee_deductions: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction?]?,
              employer_contributions: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution?]?,
              gross_pay: FinchAPI::Money?,
              individual_id: String,
              net_pay: FinchAPI::Money?,
              payment_method: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::payment_method?,
              taxes: ::Array[FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax?]?,
              total_hours: Float?,
              type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::type_?
            }

            type earning =
              {
                amount: Integer?,
                currency: String?,
                hours: Float?,
                name: String?,
                type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::type_?,
                attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::Attributes?
              }

            class Earning < FinchAPI::Internal::Type::BaseModel
              attr_accessor amount: Integer?

              attr_accessor currency: String?

              attr_accessor hours: Float?

              attr_accessor name: String?

              attr_accessor type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::type_?

              attr_accessor attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::Attributes?

              def initialize: (
                amount: Integer?,
                currency: String?,
                hours: Float?,
                name: String?,
                type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::type_?,
                ?attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::Attributes?
              ) -> void

              def to_hash: -> {
                amount: Integer?,
                currency: String?,
                hours: Float?,
                name: String?,
                type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::type_?,
                attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::Attributes?
              }

              type type_ =
                :salary
                | :wage
                | :reimbursement
                | :overtime
                | :severance
                | :double_overtime
                | :pto
                | :sick
                | :bonus
                | :commission
                | :tips
                | :"1099"
                | :other

              module Type
                extend FinchAPI::Internal::Type::Enum

                SALARY: :salary
                WAGE: :wage
                REIMBURSEMENT: :reimbursement
                OVERTIME: :overtime
                SEVERANCE: :severance
                DOUBLE_OVERTIME: :double_overtime
                PTO: :pto
                SICK: :sick
                BONUS: :bonus
                COMMISSION: :commission
                TIPS: :tips
                TYPE_1099: :"1099"
                OTHER: :other

                def self?.values: -> ::Array[FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::type_]
              end

              type attributes =
                {
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::Attributes::Metadata
                }

              class Attributes < FinchAPI::Internal::Type::BaseModel
                attr_accessor metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::Attributes::Metadata

                def initialize: (
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::Attributes::Metadata
                ) -> void

                def to_hash: -> {
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Earning::Attributes::Metadata
                }

                type metadata = { metadata: ::Hash[Symbol, top?] }

                class Metadata < FinchAPI::Internal::Type::BaseModel
                  attr_accessor metadata: ::Hash[Symbol, top?]

                  def initialize: (metadata: ::Hash[Symbol, top?]) -> void

                  def to_hash: -> { metadata: ::Hash[Symbol, top?] }
                end
              end
            end

            type employee_deduction =
              {
                amount: Integer?,
                currency: String?,
                name: String?,
                pre_tax: bool?,
                type: FinchAPI::Models::HRIS::benefit_type?,
                attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction::Attributes?
              }

            class EmployeeDeduction < FinchAPI::Internal::Type::BaseModel
              attr_accessor amount: Integer?

              attr_accessor currency: String?

              attr_accessor name: String?

              attr_accessor pre_tax: bool?

              attr_accessor type: FinchAPI::Models::HRIS::benefit_type?

              attr_accessor attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction::Attributes?

              def initialize: (
                amount: Integer?,
                currency: String?,
                name: String?,
                pre_tax: bool?,
                type: FinchAPI::Models::HRIS::benefit_type?,
                ?attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction::Attributes?
              ) -> void

              def to_hash: -> {
                amount: Integer?,
                currency: String?,
                name: String?,
                pre_tax: bool?,
                type: FinchAPI::Models::HRIS::benefit_type?,
                attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction::Attributes?
              }

              type attributes =
                {
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction::Attributes::Metadata
                }

              class Attributes < FinchAPI::Internal::Type::BaseModel
                attr_accessor metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction::Attributes::Metadata

                def initialize: (
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction::Attributes::Metadata
                ) -> void

                def to_hash: -> {
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployeeDeduction::Attributes::Metadata
                }

                type metadata = { metadata: ::Hash[Symbol, top?] }

                class Metadata < FinchAPI::Internal::Type::BaseModel
                  attr_accessor metadata: ::Hash[Symbol, top?]

                  def initialize: (metadata: ::Hash[Symbol, top?]) -> void

                  def to_hash: -> { metadata: ::Hash[Symbol, top?] }
                end
              end
            end

            type employer_contribution =
              {
                currency: String?,
                name: String?,
                type: FinchAPI::Models::HRIS::benefit_type?,
                amount: Integer?,
                attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution::Attributes?
              }

            class EmployerContribution < FinchAPI::Internal::Type::BaseModel
              attr_accessor currency: String?

              attr_accessor name: String?

              attr_accessor type: FinchAPI::Models::HRIS::benefit_type?

              attr_accessor amount: Integer?

              attr_accessor attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution::Attributes?

              def initialize: (
                currency: String?,
                name: String?,
                type: FinchAPI::Models::HRIS::benefit_type?,
                ?amount: Integer?,
                ?attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution::Attributes?
              ) -> void

              def to_hash: -> {
                currency: String?,
                name: String?,
                type: FinchAPI::Models::HRIS::benefit_type?,
                amount: Integer?,
                attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution::Attributes?
              }

              type attributes =
                {
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution::Attributes::Metadata
                }

              class Attributes < FinchAPI::Internal::Type::BaseModel
                attr_accessor metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution::Attributes::Metadata

                def initialize: (
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution::Attributes::Metadata
                ) -> void

                def to_hash: -> {
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::EmployerContribution::Attributes::Metadata
                }

                type metadata = { metadata: ::Hash[Symbol, top?] }

                class Metadata < FinchAPI::Internal::Type::BaseModel
                  attr_accessor metadata: ::Hash[Symbol, top?]

                  def initialize: (metadata: ::Hash[Symbol, top?]) -> void

                  def to_hash: -> { metadata: ::Hash[Symbol, top?] }
                end
              end
            end

            type payment_method = :check | :direct_deposit | :other

            module PaymentMethod
              extend FinchAPI::Internal::Type::Enum

              CHECK: :check
              DIRECT_DEPOSIT: :direct_deposit
              OTHER: :other

              def self?.values: -> ::Array[FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::payment_method]
            end

            type tax =
              {
                currency: String?,
                employer: bool?,
                name: String?,
                type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::type_?,
                amount: Integer?,
                attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::Attributes?
              }

            class Tax < FinchAPI::Internal::Type::BaseModel
              attr_accessor currency: String?

              attr_accessor employer: bool?

              attr_accessor name: String?

              attr_accessor type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::type_?

              attr_accessor amount: Integer?

              attr_accessor attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::Attributes?

              def initialize: (
                currency: String?,
                employer: bool?,
                name: String?,
                type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::type_?,
                ?amount: Integer?,
                ?attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::Attributes?
              ) -> void

              def to_hash: -> {
                currency: String?,
                employer: bool?,
                name: String?,
                type: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::type_?,
                amount: Integer?,
                attributes: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::Attributes?
              }

              type type_ = :state | :federal | :local | :fica

              module Type
                extend FinchAPI::Internal::Type::Enum

                STATE: :state
                FEDERAL: :federal
                LOCAL: :local
                FICA: :fica

                def self?.values: -> ::Array[FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::type_]
              end

              type attributes =
                {
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::Attributes::Metadata
                }

              class Attributes < FinchAPI::Internal::Type::BaseModel
                attr_accessor metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::Attributes::Metadata

                def initialize: (
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::Attributes::Metadata
                ) -> void

                def to_hash: -> {
                  metadata: FinchAPI::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::Tax::Attributes::Metadata
                }

                type metadata = { metadata: ::Hash[Symbol, top?] }

                class Metadata < FinchAPI::Internal::Type::BaseModel
                  attr_accessor metadata: ::Hash[Symbol, top?]

                  def initialize: (metadata: ::Hash[Symbol, top?]) -> void

                  def to_hash: -> { metadata: ::Hash[Symbol, top?] }
                end
              end
            end

            type type_ =
              :off_cycle_payroll | :one_time_payment | :regular_payroll

            module Type
              extend FinchAPI::Internal::Type::Enum

              OFF_CYCLE_PAYROLL: :off_cycle_payroll
              ONE_TIME_PAYMENT: :one_time_payment
              REGULAR_PAYROLL: :regular_payroll

              def self?.values: -> ::Array[FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember0::PayStatement::type_]
            end
          end
        end

        type batch_error =
          { code: Float, message: String, name: String, finch_code: String }

        class BatchError < FinchAPI::Internal::Type::BaseModel
          attr_accessor code: Float

          attr_accessor message: String

          attr_accessor name: String

          attr_reader finch_code: String?

          def finch_code=: (String) -> String

          def initialize: (
            code: Float,
            message: String,
            name: String,
            ?finch_code: String
          ) -> void

          def to_hash: -> {
            code: Float,
            message: String,
            name: String,
            finch_code: String
          }
        end

        type union_member2 =
          {
            code: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::code,
            finch_code: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::finch_code,
            message: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::message,
            name: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::name_
          }

        class UnionMember2 < FinchAPI::Internal::Type::BaseModel
          attr_accessor code: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::code

          attr_accessor finch_code: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::finch_code

          attr_accessor message: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::message

          attr_accessor name: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::name_

          def initialize: (
            code: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::code,
            finch_code: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::finch_code,
            message: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::message,
            name: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::name_
          ) -> void

          def to_hash: -> {
            code: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::code,
            finch_code: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::finch_code,
            message: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::message,
            name: FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::name_
          }

          type code = Float

          module Code
            extend FinchAPI::Internal::Type::Enum

            CODE_202: 202

            def self?.values: -> ::Array[FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::code]
          end

          type finch_code = :data_sync_in_progress

          module FinchCode
            extend FinchAPI::Internal::Type::Enum

            DATA_SYNC_IN_PROGRESS: :data_sync_in_progress

            def self?.values: -> ::Array[FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::finch_code]
          end

          type message =
            :"The pay statements for this payment are being fetched. Please check back later."

          module Message
            extend FinchAPI::Internal::Type::Enum

            THE_PAY_STATEMENTS_FOR_THIS_PAYMENT_ARE_BEING_FETCHED_PLEASE_CHECK_BACK_LATER: :"The pay statements for this payment are being fetched. Please check back later."

            def self?.values: -> ::Array[FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::message]
          end

          type name_ = :accepted

          module Name
            extend FinchAPI::Internal::Type::Enum

            ACCEPTED: :accepted

            def self?.values: -> ::Array[FinchAPI::Models::HRIS::PayStatementResponseBody::UnionMember2::name_]
          end
        end

        def self?.variants: -> ::Array[FinchAPI::Models::HRIS::pay_statement_response_body]
      end
    end
  end
end
