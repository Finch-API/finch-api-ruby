module FinchAPI
  module Models
    module HRIS
      type payment =
        {
          id: String,
          company_debit: FinchAPI::Money?,
          debit_date: String?,
          employee_taxes: FinchAPI::Money?,
          employer_taxes: FinchAPI::Money?,
          gross_pay: FinchAPI::Money?,
          individual_ids: ::Array[String]?,
          net_pay: FinchAPI::Money?,
          pay_date: String?,
          pay_frequencies: ::Array[FinchAPI::Models::HRIS::Payment::pay_frequency]?,
          pay_group_ids: ::Array[String]?,
          pay_period: FinchAPI::HRIS::Payment::PayPeriod?
        }

      class Payment < FinchAPI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor company_debit: FinchAPI::Money?

        attr_accessor debit_date: String?

        attr_accessor employee_taxes: FinchAPI::Money?

        attr_accessor employer_taxes: FinchAPI::Money?

        attr_accessor gross_pay: FinchAPI::Money?

        attr_accessor individual_ids: ::Array[String]?

        attr_accessor net_pay: FinchAPI::Money?

        attr_accessor pay_date: String?

        attr_accessor pay_frequencies: ::Array[FinchAPI::Models::HRIS::Payment::pay_frequency]?

        attr_accessor pay_group_ids: ::Array[String]?

        attr_accessor pay_period: FinchAPI::HRIS::Payment::PayPeriod?

        def initialize: (
          id: String,
          company_debit: FinchAPI::Money?,
          debit_date: String?,
          employee_taxes: FinchAPI::Money?,
          employer_taxes: FinchAPI::Money?,
          gross_pay: FinchAPI::Money?,
          individual_ids: ::Array[String]?,
          net_pay: FinchAPI::Money?,
          pay_date: String?,
          pay_frequencies: ::Array[FinchAPI::Models::HRIS::Payment::pay_frequency]?,
          pay_group_ids: ::Array[String]?,
          pay_period: FinchAPI::HRIS::Payment::PayPeriod?
        ) -> void

        def to_hash: -> {
          id: String,
          company_debit: FinchAPI::Money?,
          debit_date: String?,
          employee_taxes: FinchAPI::Money?,
          employer_taxes: FinchAPI::Money?,
          gross_pay: FinchAPI::Money?,
          individual_ids: ::Array[String]?,
          net_pay: FinchAPI::Money?,
          pay_date: String?,
          pay_frequencies: ::Array[FinchAPI::Models::HRIS::Payment::pay_frequency]?,
          pay_group_ids: ::Array[String]?,
          pay_period: FinchAPI::HRIS::Payment::PayPeriod?
        }

        type pay_frequency =
          :annually
          | :bi_weekly
          | :daily
          | :monthly
          | :other
          | :quarterly
          | :semi_annually
          | :semi_monthly
          | :weekly

        module PayFrequency
          extend FinchAPI::Internal::Type::Enum

          ANNUALLY: :annually
          BI_WEEKLY: :bi_weekly
          DAILY: :daily
          MONTHLY: :monthly
          OTHER: :other
          QUARTERLY: :quarterly
          SEMI_ANNUALLY: :semi_annually
          SEMI_MONTHLY: :semi_monthly
          WEEKLY: :weekly

          def self?.values: -> ::Array[FinchAPI::Models::HRIS::Payment::pay_frequency]
        end

        type pay_period = { end_date: String?, start_date: String? }

        class PayPeriod < FinchAPI::Internal::Type::BaseModel
          attr_accessor end_date: String?

          attr_accessor start_date: String?

          def initialize: (end_date: String?, start_date: String?) -> void

          def to_hash: -> { end_date: String?, start_date: String? }
        end
      end
    end
  end
end
