module FinchAPI
  module Models
    module HRIS
      type hris_company =
        {
          id: String,
          accounts: ::Array[FinchAPI::HRIS::HRISCompany::Account]?,
          departments: ::Array[FinchAPI::HRIS::HRISCompany::Department?]?,
          ein: String?,
          entity: FinchAPI::HRIS::HRISCompany::Entity?,
          legal_name: String?,
          locations: ::Array[FinchAPI::Location?]?,
          primary_email: String?,
          primary_phone_number: String?
        }

      class HRISCompany < FinchAPI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor accounts: ::Array[FinchAPI::HRIS::HRISCompany::Account]?

        attr_accessor departments: ::Array[FinchAPI::HRIS::HRISCompany::Department?]?

        attr_accessor ein: String?

        attr_accessor entity: FinchAPI::HRIS::HRISCompany::Entity?

        attr_accessor legal_name: String?

        attr_accessor locations: ::Array[FinchAPI::Location?]?

        attr_accessor primary_email: String?

        attr_accessor primary_phone_number: String?

        def initialize: (
          id: String,
          accounts: ::Array[FinchAPI::HRIS::HRISCompany::Account]?,
          departments: ::Array[FinchAPI::HRIS::HRISCompany::Department?]?,
          ein: String?,
          entity: FinchAPI::HRIS::HRISCompany::Entity?,
          legal_name: String?,
          locations: ::Array[FinchAPI::Location?]?,
          primary_email: String?,
          primary_phone_number: String?
        ) -> void

        type account =
          {
            account_name: String?,
            account_number: String?,
            account_type: FinchAPI::HRIS::HRISCompany::Account::account_type?,
            institution_name: String?,
            routing_number: String?
          }

        class Account < FinchAPI::Internal::Type::BaseModel
          attr_accessor account_name: String?

          attr_accessor account_number: String?

          attr_accessor account_type: FinchAPI::HRIS::HRISCompany::Account::account_type?

          attr_accessor institution_name: String?

          attr_accessor routing_number: String?

          def initialize: (
            account_name: String?,
            account_number: String?,
            account_type: FinchAPI::HRIS::HRISCompany::Account::account_type?,
            institution_name: String?,
            routing_number: String?
          ) -> void

          type account_type = :checking | :savings

          module AccountType
            extend FinchAPI::Internal::Type::Enum

            CHECKING: :checking
            SAVINGS: :savings

            def self?.values: -> ::Array[FinchAPI::HRIS::HRISCompany::Account::account_type]
          end
        end

        type department =
          {
            name: String?,
            parent: FinchAPI::HRIS::HRISCompany::Department::Parent?
          }

        class Department < FinchAPI::Internal::Type::BaseModel
          attr_accessor name: String?

          attr_accessor parent: FinchAPI::HRIS::HRISCompany::Department::Parent?

          def initialize: (
            name: String?,
            parent: FinchAPI::HRIS::HRISCompany::Department::Parent?
          ) -> void

          type parent = { name: String? }

          class Parent < FinchAPI::Internal::Type::BaseModel
            attr_accessor name: String?

            def initialize: (name: String?) -> void
          end
        end

        type entity =
          {
            subtype: FinchAPI::HRIS::HRISCompany::Entity::subtype?,
            type: FinchAPI::HRIS::HRISCompany::Entity::type_?
          }

        class Entity < FinchAPI::Internal::Type::BaseModel
          attr_accessor subtype: FinchAPI::HRIS::HRISCompany::Entity::subtype?

          attr_accessor type: FinchAPI::HRIS::HRISCompany::Entity::type_?

          def initialize: (
            subtype: FinchAPI::HRIS::HRISCompany::Entity::subtype?,
            type: FinchAPI::HRIS::HRISCompany::Entity::type_?
          ) -> void

          type subtype = :s_corporation | :c_corporation | :b_corporation

          module Subtype
            extend FinchAPI::Internal::Type::Enum

            S_CORPORATION: :s_corporation
            C_CORPORATION: :c_corporation
            B_CORPORATION: :b_corporation

            def self?.values: -> ::Array[FinchAPI::HRIS::HRISCompany::Entity::subtype]
          end

          type type_ =
            :llc
            | :lp
            | :corporation
            | :sole_proprietor
            | :non_profit
            | :partnership
            | :cooperative

          module Type
            extend FinchAPI::Internal::Type::Enum

            LLC: :llc
            LP: :lp
            CORPORATION: :corporation
            SOLE_PROPRIETOR: :sole_proprietor
            NON_PROFIT: :non_profit
            PARTNERSHIP: :partnership
            COOPERATIVE: :cooperative

            def self?.values: -> ::Array[FinchAPI::HRIS::HRISCompany::Entity::type_]
          end
        end
      end
    end
  end
end
