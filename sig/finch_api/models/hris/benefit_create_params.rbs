module FinchAPI
  module Models
    module HRIS
      type benefit_create_params =
        {
          entity_ids: ::Array[String],
          company_contribution: FinchAPI::HRIS::BenefitCreateParams::CompanyContribution?,
          description: String,
          frequency: FinchAPI::Models::HRIS::benefit_frequency?,
          type: FinchAPI::Models::HRIS::benefit_type?
        }
        & FinchAPI::Internal::Type::request_parameters

      class BenefitCreateParams < FinchAPI::Internal::Type::BaseModel
        extend FinchAPI::Internal::Type::RequestParameters::Converter
        include FinchAPI::Internal::Type::RequestParameters

        attr_reader entity_ids: ::Array[String]?

        def entity_ids=: (::Array[String]) -> ::Array[String]

        attr_accessor company_contribution: FinchAPI::HRIS::BenefitCreateParams::CompanyContribution?

        attr_reader description: String?

        def description=: (String) -> String

        attr_accessor frequency: FinchAPI::Models::HRIS::benefit_frequency?

        attr_accessor type: FinchAPI::Models::HRIS::benefit_type?

        def initialize: (
          ?entity_ids: ::Array[String],
          ?company_contribution: FinchAPI::HRIS::BenefitCreateParams::CompanyContribution?,
          ?description: String,
          ?frequency: FinchAPI::Models::HRIS::benefit_frequency?,
          ?type: FinchAPI::Models::HRIS::benefit_type?,
          ?request_options: FinchAPI::request_opts
        ) -> void

        def to_hash: -> {
          entity_ids: ::Array[String],
          company_contribution: FinchAPI::HRIS::BenefitCreateParams::CompanyContribution?,
          description: String,
          frequency: FinchAPI::Models::HRIS::benefit_frequency?,
          type: FinchAPI::Models::HRIS::benefit_type?,
          request_options: FinchAPI::RequestOptions
        }

        type company_contribution =
          {
            tiers: ::Array[FinchAPI::HRIS::BenefitCreateParams::CompanyContribution::Tier],
            type: FinchAPI::Models::HRIS::BenefitCreateParams::CompanyContribution::type_
          }

        class CompanyContribution < FinchAPI::Internal::Type::BaseModel
          attr_accessor tiers: ::Array[FinchAPI::HRIS::BenefitCreateParams::CompanyContribution::Tier]

          attr_accessor type: FinchAPI::Models::HRIS::BenefitCreateParams::CompanyContribution::type_

          def initialize: (
            tiers: ::Array[FinchAPI::HRIS::BenefitCreateParams::CompanyContribution::Tier],
            type: FinchAPI::Models::HRIS::BenefitCreateParams::CompanyContribution::type_
          ) -> void

          def to_hash: -> {
            tiers: ::Array[FinchAPI::HRIS::BenefitCreateParams::CompanyContribution::Tier],
            type: FinchAPI::Models::HRIS::BenefitCreateParams::CompanyContribution::type_
          }

          type tier = { match: Integer, threshold: Integer }

          class Tier < FinchAPI::Internal::Type::BaseModel
            attr_accessor match: Integer

            attr_accessor threshold: Integer

            def initialize: (match: Integer, threshold: Integer) -> void

            def to_hash: -> { match: Integer, threshold: Integer }
          end

          type type_ = :match

          module Type
            extend FinchAPI::Internal::Type::Enum

            MATCH: :match

            def self?.values: -> ::Array[FinchAPI::Models::HRIS::BenefitCreateParams::CompanyContribution::type_]
          end
        end
      end
    end
  end
end
