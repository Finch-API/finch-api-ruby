module FinchAPI
  module Models
    module Payroll
      type pay_group_list_response =
        {
          id: String,
          name: String,
          pay_frequencies: ::Array[FinchAPI::Models::Payroll::PayGroupListResponse::pay_frequency]
        }

      class PayGroupListResponse < FinchAPI::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader pay_frequencies: ::Array[FinchAPI::Models::Payroll::PayGroupListResponse::pay_frequency]?

        def pay_frequencies=: (
          ::Array[FinchAPI::Models::Payroll::PayGroupListResponse::pay_frequency]
        ) -> ::Array[FinchAPI::Models::Payroll::PayGroupListResponse::pay_frequency]

        def initialize:
          (
            ?id: String,
            ?name: String,
            ?pay_frequencies: ::Array[FinchAPI::Models::Payroll::PayGroupListResponse::pay_frequency]
          ) -> void
          | (
            ?FinchAPI::Models::Payroll::pay_group_list_response
            | FinchAPI::BaseModel data
          ) -> void

        def to_hash: -> FinchAPI::Models::Payroll::pay_group_list_response

        type pay_frequency =
          :annually
          | :semi_annually
          | :quarterly
          | :monthly
          | :semi_monthly
          | :bi_weekly
          | :weekly
          | :daily
          | :other

        class PayFrequency < FinchAPI::Enum
          ANNUALLY: :annually
          SEMI_ANNUALLY: :semi_annually
          QUARTERLY: :quarterly
          MONTHLY: :monthly
          SEMI_MONTHLY: :semi_monthly
          BI_WEEKLY: :bi_weekly
          WEEKLY: :weekly
          DAILY: :daily
          OTHER: :other

          def self.values: -> ::Array[FinchAPI::Models::Payroll::PayGroupListResponse::pay_frequency]
        end
      end
    end
  end
end
