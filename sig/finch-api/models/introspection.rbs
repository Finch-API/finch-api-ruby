module FinchAPI
  module Models
    type introspection =
      {
        account_id: String,
        authentication_methods: ::Array[FinchAPI::Models::Introspection::AuthenticationMethod],
        client_id: String,
        client_type: FinchAPI::Models::Introspection::client_type,
        company_id: String,
        connection_id: String,
        connection_status: FinchAPI::Models::Introspection::ConnectionStatus,
        connection_type: FinchAPI::Models::Introspection::connection_type,
        customer_email: String?,
        customer_id: String?,
        customer_name: String?,
        manual: bool,
        payroll_provider_id: String,
        products: ::Array[String],
        provider_id: String,
        username: String
      }

    class Introspection < FinchAPI::BaseModel
      attr_accessor account_id: String

      attr_accessor authentication_methods: ::Array[FinchAPI::Models::Introspection::AuthenticationMethod]

      attr_accessor client_id: String

      attr_accessor client_type: FinchAPI::Models::Introspection::client_type

      attr_accessor company_id: String

      attr_accessor connection_id: String

      attr_accessor connection_status: FinchAPI::Models::Introspection::ConnectionStatus

      attr_accessor connection_type: FinchAPI::Models::Introspection::connection_type

      attr_accessor customer_email: String?

      attr_accessor customer_id: String?

      attr_accessor customer_name: String?

      attr_accessor manual: bool

      attr_accessor payroll_provider_id: String

      attr_accessor products: ::Array[String]

      attr_accessor provider_id: String

      attr_accessor username: String

      def initialize: (
        account_id: String,
        authentication_methods: ::Array[FinchAPI::Models::Introspection::AuthenticationMethod],
        client_id: String,
        client_type: FinchAPI::Models::Introspection::client_type,
        company_id: String,
        connection_id: String,
        connection_status: FinchAPI::Models::Introspection::ConnectionStatus,
        connection_type: FinchAPI::Models::Introspection::connection_type,
        customer_email: String?,
        customer_id: String?,
        customer_name: String?,
        manual: bool,
        payroll_provider_id: String,
        products: ::Array[String],
        provider_id: String,
        username: String
      ) -> void

      def to_hash: -> FinchAPI::Models::introspection

      type authentication_method =
        {
          connection_status: FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus,
          products: ::Array[String],
          type: FinchAPI::Models::Introspection::AuthenticationMethod::type_
        }

      class AuthenticationMethod < FinchAPI::BaseModel
        attr_reader connection_status: FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus?

        def connection_status=: (
          FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus
        ) -> FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus

        attr_reader products: ::Array[String]?

        def products=: (::Array[String]) -> ::Array[String]

        attr_reader type: FinchAPI::Models::Introspection::AuthenticationMethod::type_?

        def type=: (
          FinchAPI::Models::Introspection::AuthenticationMethod::type_
        ) -> FinchAPI::Models::Introspection::AuthenticationMethod::type_

        def initialize: (
          ?connection_status: FinchAPI::Models::Introspection::AuthenticationMethod::ConnectionStatus,
          ?products: ::Array[String],
          ?type: FinchAPI::Models::Introspection::AuthenticationMethod::type_
        ) -> void

        def to_hash: -> FinchAPI::Models::Introspection::authentication_method

        type connection_status =
          { message: String, status: FinchAPI::Models::connection_status_type }

        class ConnectionStatus < FinchAPI::BaseModel
          attr_reader message: String?

          def message=: (String) -> String

          attr_reader status: FinchAPI::Models::connection_status_type?

          def status=: (
            FinchAPI::Models::connection_status_type
          ) -> FinchAPI::Models::connection_status_type

          def initialize: (
            ?message: String,
            ?status: FinchAPI::Models::connection_status_type
          ) -> void

          def to_hash: -> FinchAPI::Models::Introspection::AuthenticationMethod::connection_status
        end

        type type_ =
          :assisted | :credential | :api_token | :api_credential | :oauth

        module Type
          extend FinchAPI::Enum

          ASSISTED: :assisted
          CREDENTIAL: :credential
          API_TOKEN: :api_token
          API_CREDENTIAL: :api_credential
          OAUTH: :oauth

          def self?.values: -> ::Array[FinchAPI::Models::Introspection::AuthenticationMethod::type_]
        end
      end

      type client_type = :production | :development | :sandbox

      module ClientType
        extend FinchAPI::Enum

        PRODUCTION: :production
        DEVELOPMENT: :development
        SANDBOX: :sandbox

        def self?.values: -> ::Array[FinchAPI::Models::Introspection::client_type]
      end

      type connection_status =
        {
          last_successful_sync: Time,
          message: String,
          status: FinchAPI::Models::connection_status_type
        }

      class ConnectionStatus < FinchAPI::BaseModel
        attr_reader last_successful_sync: Time?

        def last_successful_sync=: (Time) -> Time

        attr_reader message: String?

        def message=: (String) -> String

        attr_reader status: FinchAPI::Models::connection_status_type?

        def status=: (
          FinchAPI::Models::connection_status_type
        ) -> FinchAPI::Models::connection_status_type

        def initialize: (
          ?last_successful_sync: Time,
          ?message: String,
          ?status: FinchAPI::Models::connection_status_type
        ) -> void

        def to_hash: -> FinchAPI::Models::Introspection::connection_status
      end

      type connection_type = :provider | :finch

      module ConnectionType
        extend FinchAPI::Enum

        PROVIDER: :provider
        FINCH: :finch

        def self?.values: -> ::Array[FinchAPI::Models::Introspection::connection_type]
      end
    end
  end
end
