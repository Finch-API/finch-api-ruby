module FinchAPI
  module Models
    module HRIS
      type document_list_params =
        {
          individual_ids: ::Array[String],
          limit: Integer,
          offset: Integer,
          types: ::Array[FinchAPI::Models::HRIS::DocumentListParams::type_]
        }
        & FinchAPI::request_parameters

      class DocumentListParams < FinchAPI::BaseModel
        extend FinchAPI::RequestParameters::Converter
        include FinchAPI::RequestParameters

        attr_reader individual_ids: ::Array[String]?

        def individual_ids=: (::Array[String]) -> ::Array[String]

        attr_reader limit: Integer?

        def limit=: (Integer) -> Integer

        attr_reader offset: Integer?

        def offset=: (Integer) -> Integer

        attr_reader types: ::Array[FinchAPI::Models::HRIS::DocumentListParams::type_]?

        def types=: (
          ::Array[FinchAPI::Models::HRIS::DocumentListParams::type_]
        ) -> ::Array[FinchAPI::Models::HRIS::DocumentListParams::type_]

        def initialize: (
          ?individual_ids: ::Array[String],
          ?limit: Integer,
          ?offset: Integer,
          ?types: ::Array[FinchAPI::Models::HRIS::DocumentListParams::type_],
          ?request_options: FinchAPI::request_opts
        ) -> void

        def to_hash: -> FinchAPI::Models::HRIS::document_list_params

        type type_ = :w4_2020 | :w4_2005

        module Type
          extend FinchAPI::Enum

          W4_2020: :w4_2020
          W4_2005: :w4_2005

          def self.values: -> ::Array[FinchAPI::Models::HRIS::DocumentListParams::type_]
        end
      end
    end
  end
end
