module FinchAPI
  module Models
    module Sandbox
      module Connections
        type account_update_response =
          {
            account_id: String,
            authentication_type: FinchAPI::Models::Sandbox::Connections::AccountUpdateResponse::authentication_type,
            company_id: String,
            products: ::Array[String],
            provider_id: String,
            connection_id: String
          }

        class AccountUpdateResponse < FinchAPI::BaseModel
          attr_accessor account_id: String

          attr_accessor authentication_type: FinchAPI::Models::Sandbox::Connections::AccountUpdateResponse::authentication_type

          attr_accessor company_id: String

          attr_accessor products: ::Array[String]

          attr_accessor provider_id: String

          attr_reader connection_id: String?

          def connection_id=: (String) -> String

          def initialize:
            (
              account_id: String,
              authentication_type: FinchAPI::Models::Sandbox::Connections::AccountUpdateResponse::authentication_type,
              company_id: String,
              products: ::Array[String],
              provider_id: String,
              connection_id: String
            ) -> void
            | (
              ?FinchAPI::Models::Sandbox::Connections::account_update_response
              | FinchAPI::BaseModel data
            ) -> void

          def to_hash: -> FinchAPI::Models::Sandbox::Connections::account_update_response

          type authentication_type =
            :credential | :api_token | :oauth | :assisted

          class AuthenticationType < FinchAPI::Enum
            CREDENTIAL: :credential
            API_TOKEN: :api_token
            OAUTH: :oauth
            ASSISTED: :assisted

            def self.values: -> ::Array[FinchAPI::Models::Sandbox::Connections::AccountUpdateResponse::authentication_type]
          end
        end
      end
    end
  end
end
