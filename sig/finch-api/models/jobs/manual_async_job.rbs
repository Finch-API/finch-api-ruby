module FinchAPI
  module Models
    module Jobs
      type manual_async_job =
        {
          body: ::Array[top]?,
          job_id: String,
          status: FinchAPI::Models::Jobs::ManualAsyncJob::status
        }

      class ManualAsyncJob < FinchAPI::BaseModel
        attr_accessor body: ::Array[top]?

        attr_accessor job_id: String

        attr_accessor status: FinchAPI::Models::Jobs::ManualAsyncJob::status

        def initialize: (
          body: ::Array[top]?,
          job_id: String,
          status: FinchAPI::Models::Jobs::ManualAsyncJob::status
        ) -> void

        def to_hash: -> FinchAPI::Models::Jobs::manual_async_job

        type status = :pending | :in_progress | :error | :complete

        class Status < FinchAPI::Enum
          PENDING: :pending
          IN_PROGRESS: :in_progress
          ERROR: :error
          COMPLETE: :complete

          def self.values: -> ::Array[FinchAPI::Models::Jobs::ManualAsyncJob::status]
        end
      end
    end
  end
end
